/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/billing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Deprecated. Get billing data for the store */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillingAccount"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bundle": {
        parameters: {
            query?: {
                /** @example 100 */
                paginationStart?: number;
                /** @example 20 */
                paginationPageLength?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Bundle"];
        put?: never;
        post: operations["addBundle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bundle/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BundleResponse"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BundleRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BundleResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: operations["deleteBundle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bundlefilter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["BundleFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bundlefilter/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BundleFilterResponse"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BundleFilterRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BundleFilterResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: operations["deleteBundleFilter"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customerarticles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of customer articles */
        get: {
            parameters: {
                query?: {
                    /** @example 123abc */
                    serieno?: string;
                    paginationPageLength?: number;
                    /** @example 31241 */
                    customerid?: number;
                    /** @example Bike Tyson */
                    freetext?: string;
                    /** @example true */
                    allowdeleted?: boolean;
                    scope?: "sharecustomerarticles" | "sharecustomers";
                    /**
                     * @description Get all customer articles updated after the given date
                     * @example 2020-01-01 00:00:00
                     */
                    updated_after?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomerArticleListResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new customer article */
        post: operations["addCustomerArticle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customerarticles/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete customer articles */
        post: operations["deleteCustomerArticles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customerarticles/{id}/switchcustomer": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        /** Switch customer of a customer article */
        put: operations["switchCustomer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customerarticles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** Get a customer article */
        get: {
            parameters: {
                query?: {
                    /** @example true or 1 */
                    allowdeleted?: boolean;
                    /** @example true or 1 */
                    withdraftsubscription?: boolean;
                };
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomerArticleResponse"];
                    };
                };
            };
        };
        /** Update a customer article */
        put: operations["updateCustomerArticle"];
        post?: never;
        /** Delete a customer article */
        delete: operations["deleteCustomerArticle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customertags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of customer tags used by the store */
        get: operations["getCustomerTags"];
        put?: never;
        /** Add a new customer tag to the store */
        post: operations["createCustomerTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customertags/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a customer tag */
        get: operations["getCustomerTag"];
        /** Update a customer tag */
        put: operations["updateCustomerTag"];
        post?: never;
        /** Delete a customer tag from the store */
        delete: operations["deleteCustomerTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for customers */
        get: operations["searchCustomers"];
        put?: never;
        /** Add a new customer */
        post: operations["addCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customers/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a customer */
        get: operations["getCustomer"];
        /** Replace a customer */
        put: operations["updateCustomer"];
        post?: never;
        /** Delete a customer */
        delete: operations["deleteCustomer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customfields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of all customfields. */
        get: {
            parameters: {
                query?: {
                    endpoint?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchCustomFieldResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customfields/{endpoint}/{attribute}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit customfield */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    endpoint: string;
                    attribute: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CustomFieldRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CustomFieldResponse"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounttags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["DiscountTags"];
        put?: never;
        post: operations["addDiscountTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounttags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DiscountTagRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DiscountTagResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: operations["discounttags"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/financevouchers/{balanceid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get finance voucher for a balance */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    balanceid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FinanceVoucher"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/giftcards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search for giftcards */
        get: operations["searchGiftcard"];
        put?: never;
        /** @description Create a giftcard */
        post: operations["createGiftcard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/giftcards/{giftcardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get giftcards */
        get: operations["getGiftcard"];
        /** @description Update a giftcard */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The giftcard ID */
                    giftcardId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PutGiftcardRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PutGiftcardsResponse"];
                    };
                };
                /** @description ok */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/giftcards/{giftcardid}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all transactions for a given giftcard */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The giftcard id */
                    giftcardid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok. The transactions for the giftcard is returned in the response. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetGiftCardTransactionsResponse"];
                    };
                };
                /** @description Giftcard not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hooks/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List current REST hook log entries for store. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RestHookLogResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hooks/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of valid events. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of valid rest hook events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RestHookEventResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List current subscriptions for store. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RestHookResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Subscribe to event
         * @description Subscribe to an event like product.created with a callback url to get pinged when the event triggers.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RestHook"];
                };
            };
            responses: {
                /** @description Added */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description The id needed to unsubscribe.
                             * @example 1
                             */
                            id?: number;
                        };
                    };
                };
                /** @description Invalid input */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hooks/{hookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get subscription
         * @description Get the subscription details for given an id.
         */
        get: operations["getSubscription"];
        /**
         * Update subscription
         * @description Update the subscription for an event given an id.
         */
        put: operations["updateSubscription"];
        post?: never;
        /**
         * Unsubscribe from event
         * @description Unsubscribe from an event given an id for subscription.
         */
        delete: operations["unsubscribe"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/loyalty/customer/{id}/membership": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enroll a customer into the loyalty program */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Withdraw a customer from the loyalty program */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/loyalty/customer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** Get loyalty transactions of the customer */
        get: {
            parameters: {
                query?: {
                    paginationStart?: number;
                    paginationPageLength?: number;
                };
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoyaltyTransactionsResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new transaction on this user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        content?: components["schemas"]["CreateLoyaltyTransactionRequest"];
                    };
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoyaltyTransactionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get recent notifications for the current user */
        get: {
            parameters: {
                query?: {
                    /** @description The user ID */
                    userid?: number;
                    /** @description Get alle notification updated after a certain date */
                    updated_after?: string;
                    /** @description Get alle notification created after a certain date */
                    created_after?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotificationsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the settings object describing which users are listening to what notifications */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
        /** Update the settings object describing which users are listening to what notifications */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partnerinventory/{productid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get inventory levels for partner stores matched on product number. If a product has serial products the endpoint will return the inventory sum of all those serial products
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The product ID */
                    productid: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PartnerInventoryResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partnerpermissions/derived": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PartnerPermissionDerivedResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymenttypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of all the store's payment types. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentType"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a payment type */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentType"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentType"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymenttypes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of all the store's payment types. */
        get: {
            parameters: {
                query?: {
                    /** @description Includes deleted payment types in the response when not 0 */
                    allowDeleted?: number;
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentType"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Edit an exisiting payment type */
        put: {
            parameters: {
                query?: {
                    /** @description Allows for settings deleted payment types when not 0 */
                    allowDeleted?: number;
                };
                header?: never;
                path: {
                    /** @description The PaymentType ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentType"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentType"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a payment type */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The PaymentType ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description Whether or not the PaymentType was deleted.
                             * @example 1
                             */
                            readonly deleted?: number;
                        };
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymenttyperelation/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        /** Add a list of articles to an existing payment */
        get: operations["getPaymentTypes"];
        /**
         * Changes status of a payment
         * @description Can only change the status of a payment if it is not captured
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description payment id */
                    paymentId: components["parameters"]["paymentId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentTypeRelation"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentTypeRelation"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Add a list of payments to an existing payment */
        post: operations["addPaymentTypes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/paymenttyperelation/{id}/receipts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets receipt for a paymenttyperelation */
        get: operations["getPaymentTypeReceipts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posbalances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for balances
         * @description Get balances. Balances are readonly and can only be created via Customers 1st app
         */
        get: operations["searchBalances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pospayments/{paymentId}/articles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a list of articles to an existing payment. */
        post: operations["addArticles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pospayments/{paymentId}/articles/{paymentArticleId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
                /** @description Payment article id */
                paymentArticleId: components["parameters"]["paymentArticleId"];
            };
            cookie?: never;
        };
        get?: never;
        /** a new cart. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description payment id */
                    paymentId: components["parameters"]["paymentId"];
                    /** @description Payment article id */
                    paymentArticleId: components["parameters"]["paymentArticleId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentArticleRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentArticleResponse"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** a new cart. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description payment id */
                    paymentId: components["parameters"]["paymentId"];
                    /** @description Payment article id */
                    paymentArticleId: components["parameters"]["paymentArticleId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pospayments/{paymentId}/articles/{paymentArticleId}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment article id */
                paymentArticleId: components["parameters"]["paymentArticleId"];
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** a new cart. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment article id */
                    paymentArticleId: components["parameters"]["paymentArticleId"];
                    /** @description payment id */
                    paymentId: components["parameters"]["paymentId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DiscountArticleItem"];
                };
            };
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pospayments/{paymentId}/articles/discount": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** a new cart. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description payment id */
                    paymentId: components["parameters"]["paymentId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DiscountArticleItem"];
                };
            };
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pospayments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for payments
         * @description Get payments.
         */
        get: operations["searchPosPayments"];
        put?: never;
        /**
         * Add a new POS payment
         * @description Add a new payment. For a payment use must provide the products sold via articles and the payment transactions via paymenttypes
         */
        post: operations["addPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pospayments/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        /** Get a payment */
        get: operations["getPOSPayment"];
        /** Changes payment */
        put: operations["putPOSPayment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of all the store's POS registers. */
        get: {
            parameters: {
                query?: {
                    includeDeleted?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["POSRegisterResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new POSRegister */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetPOSRegister"];
                };
            };
            responses: {
                /** @description Ok */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SetPOSRegisterResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/registers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** Get a POS register based on id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SetPOSRegisterResponse"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Edit an exisiting POS register */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetPOSRegister"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SetPOSRegisterResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Deletes a POS register based on id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SetPOSRegisterResponse"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        /** Get a products image */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductImageResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a products image */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/image/url": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set a product image from a url. This is done Async. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetProductImageFromURL"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductImageResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/addons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get addons for a specific product */
        get: operations["getProductAddons"];
        put?: never;
        /** Add a new add-on to a specific product */
        post: operations["addProductAddon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}/addons/{addonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit a addon relation */
        put: operations["putProductAddonRelation"];
        post?: never;
        /** Delete a specific addon for a specific product */
        delete: operations["deleteProductAddon"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}/addons/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the number of addons for a specific product */
        get: operations["countProductAddons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Replace products in chunks */
        put: operations["replaceProductBulk"];
        post?: never;
        /** Delete products in chunks */
        delete: operations["deleteProductBulk"];
        options?: never;
        head?: never;
        /** Patch products in bulk */
        patch: operations["updateProductBulk"];
        trace?: never;
    };
    "/productmasterdata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search the productmasterdata */
        get: operations["searchProductMasterData"];
        put?: never;
        /** Add or update product master data. Update is triggered if {suppliername, productno, industry, country} matches existing item */
        post: operations["addProductMasterdata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/productmasterdata/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add or update product master data in bulk. Update is triggered if {suppliername, productno, industry, country} matches existing item */
        post: operations["addUpdateBulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for product */
        get: operations["searchProduct"];
        put?: never;
        /** Add a new product */
        post: operations["addProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product */
        get: operations["getProduct"];
        /** Replace a product */
        put: operations["replaceProduct"];
        post?: never;
        /** Delete a product */
        delete: operations["deleteProduct"];
        options?: never;
        head?: never;
        /** Update selected fields for a product */
        patch: operations["patchProduct"];
        trace?: never;
    };
    "/producttags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of product tags used by the store */
        get: operations["getProductTags"];
        put?: never;
        /** Create a new product tag */
        post: operations["createProductTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/producttags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product tag used by the store */
        get: operations["getProductTag"];
        /** Update a product tag */
        put: operations["updateProductTag"];
        post?: never;
        /** Delete a product tag */
        delete: operations["deleteProductTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promotions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List promotions for store. */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength.
                     * @example 100
                     */
                    paginationStart?: number;
                    /**
                     * @description Determine the number of item to fetch in one page.
                     * @example 30
                     */
                    paginationPageLength?: number;
                    /** @description Optional. If equal to `1`, deleted promotions will be included in the response.
                     *      */
                    allowDeleted?: number;
                    /** @description Optional. Search for promotion name, product, brand, tag and customer group */
                    freeText?: string;
                    /** @description Optional. Search promotions by its action type */
                    actionType?: "percentage" | "adjustPriceBy" | "percentageByCostprice" | "totalPriceUnit";
                    /** @description Optional. Search promotions by start date (format YYYY-MM-DD HH:MM:SS) */
                    startDate?: string;
                    /** @description Optional. Search promotions by end date (format YYYY-MM-DD HH:MM:SS) */
                    endDate?: string;
                    /** @description Optional. Filter out single product discounts */
                    hideDiscountProductno?: boolean;
                    /** @description Optional. Filter out chain promotions */
                    hideChainPromotions?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchPromotionResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add new promotion
         * @description Create a new promotion that results in an automatic discount when matching products are put in the POS cart.
         *
         *     The automatic assignment of discounts is based product filters (explained in more detail below).
         *     When these filters match, the promotion triggers an action resulting in some kind of discount presentend in the cart.
         *     Currently, actions come in two flavors: *single product discounts* and *bundle discounts*.
         *     How the promotion will trigger depends on this flavor.
         *
         *     Single product discounts (`percentage`, `adjustPriceBy`, `percentageByCostprice`, `totalPriceUnit`):
         *       Here, a single product gets discount by some amount.
         *       The filters can match against productnos, brands and tags.
         *
         *     Each promotion has a required `name` which shown in the cart when the discount is given.
         *     `description` is optional and designed only for humans to read. It is only shown in the settings.
         *     `active` can be used to disable promotions until they are ready.
         *     Promotions will also only be considered active when today's date is inside the `startdate`-`enddate`-range.
         *     If `enddate` is `null`, the promotion is considered to run forever.
         *
         *     Product filters are inclusive by nature. In the future, excluding filters will be added as well.
         *     Filters have an `attribute` and a `value`. The attribute can be various attributes of a product, like `tag` and `productno`.
         *     For instance, to give a discount on all bikes with tag *Bike*, see the example below).
         *     The `value` can be a list of values in which case, if either of the values match, the filter matches.
         *     And if either of the filters matches, the promotion will trigger (in case of single product discounts).
         *
         *     The filters for bundle discounts currently needs to be very specific:
         *     A single filter with `attribute` = productno and `value` = *list of productnos*.
         *
         *     In the future, it will be possible to filter based on customer attributes as well, such that specific customers can get certain discounts.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        content?: components["schemas"]["Promotion"];
                    };
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description The id of the promotion.
                             * @example 123
                             */
                            id?: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promotions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve promotion
         * @description Given a specific promotion id, fetch the entire promotion object.
         */
        get: operations["retrieve"];
        /**
         * Update promotion
         * @description Replace the promotion object of a specific promotion with another.
         */
        put: operations["update"];
        post?: never;
        /**
         * Delete promotion.
         * @description Delete a promotion based an id.
         */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promotions/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get all relevant promotions for a set of products and a customer.
         * @description Get all relevant promotions for a set of products and a customer.
         *     Currently the customer is ignore and can be null.
         *     This query can be seen as "given a cart, what promotions will match?"
         *
         *     If you have multiple of the same products in the query, they should be represented as a `CartArticle`,
         *     i.e. specified by a `productno` and `quantity` (see example). Otherwise, you can simply use productno strings.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PromotionLookup"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PromotionLookupResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/promotions/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Given a cart, return the new cart with promotion discounts applied.
         * @description This endpoint is primarily used in our own POS implementation assumes our own cart data structure.
         *
         *     The bare minimum data structure for this call is an object with a property `articles` which is a list of `CartArticle`.
         *     Each article contains extra information about whether it is a product, discount etc. and whether it was created manually or automatically.
         *
         *     In the future, this might be made more generally applicable.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurringpayment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a recurring payment by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecurringPaymentResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurringpayment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of recurring payments */
        get: {
            parameters: {
                query?: {
                    /** @example 100 */
                    paginationStart?: number;
                    /** @example 20 */
                    paginationPageLength?: number;
                    exceededduedate?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchRecurringPaymentResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Creates a recurring payment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RecurringPaymentRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecurringPaymentResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurringpayment/{id}/term/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new term payment and issues an invoice to economic. It degrades costprice and subtracts from amountleft. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["POSPaymentResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurringpayment/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancels given recurring payment and regulates stock for the product and costprice */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pospayments/{paymentId}/recurringpayment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a recurring payment in draft mode and attaches an article to the given payment, which is -amountleft */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description payment id */
                    paymentId: components["parameters"]["paymentId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RecurringPaymentRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecurringPaymentResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recurringpayment/{id}/returnproduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return products that are in the recurring payment, regulates stock for the product and costprice */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/serviceplan": {
        parameters: {
            query?: {
                /** @description If it is set, it will exclude all serviceplans that does not match with the producttagrestriction. If not set it will get all serviceplans. */
                productid?: number;
                /** @description Wheter or not to include soft deleted service plans */
                withdeleted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServicePlan"];
        put?: never;
        post: operations["addServicePlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/serviceplan/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ServicePlanRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServicePlanResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: operations["deleteServicePlan"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servicesubscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ServiceSubscription"];
        put?: never;
        post: operations["addServiceSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servicesubscription/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ServiceSubscriptionRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ServiceSubscriptionResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: operations["deleteServiceSubscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servicesubscription/ticketmaterial/{materialid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description By posting a serviceplanid, the serviceplan for the customerarticle attached to the material will be updated with the given serviceplanid, and a new material will be added to the task: The price of the serviceplan with its title. When this material is paid, the subscription for the customerarticle will be activated */
        post: operations["addServiceSubscriptionToMaterial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/configs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all configs */
        get: operations["configs"];
        /** Update a list of configs */
        put: operations["updateConfigs"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/configs/{configKey}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configKey: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a config */
        delete: operations["deleteConfig"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get settings */
        get: operations["getSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get store info */
        get: operations["getStore"];
        /** Update store info */
        put: operations["updateStore"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppinglist/addbybarcode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add items by barcode */
        post: operations["addShoppingListItemByBarcode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppinglist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List shopping list */
        get: operations["searchShoppingList"];
        put?: never;
        /** Add item to the shopping list */
        post: operations["addShippingListItem"];
        /** Delete a shopping list order */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            deleted?: number;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppinglist/totalcostprice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the total cost price of a shopping list */
        get: operations["getShoppingListTotalCostPrice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppinglist/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a shopping list item */
        get: operations["getShoppingListItem"];
        /** Replace item in shopping list */
        put: operations["replaceShoppingListItem"];
        post?: never;
        /** Delete a item */
        delete: operations["deleteShoppingListItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppinglistorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List shopping list orders */
        get: operations["searchShoppingListOrders"];
        put?: never;
        /** An order of shopping list items */
        post: operations["addShoppingListOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppinglistorder/{id}/note": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        /** Update the shopping list order's note */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Content body for updating the note */
                        content?: {
                            /** @description New note */
                            note?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchShoppingListOrderResponse"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shoppinglistorder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a shopping list order */
        delete: operations["deleteOrder"];
        options?: never;
        head?: never;
        /** Update the shopping list order */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ShoppingListOrderPatchRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchShoppingListOrderResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/shoppinglistorder/bulkupdate/{orderlistid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates properties for all orders that has the given orderlistid. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    orderlistid: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        expecteddelivery?: string | null;
                    };
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            updated?: number;
                        };
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for stock transaction
         * @description Represents changes to product stock and costprice
         */
        get: operations["getStockTransactions"];
        put?: never;
        /** Change stock of a product relatively */
        post: operations["addStockTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactions/{stocktransactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a stock transaction */
        get: operations["getStockTransaction"];
        /**
         * Replace a stock transaction
         * @description Stock transactions can be changed if they are not committed
         */
        put: operations["replaceStockTransaction"];
        post?: never;
        /** Delete a stock transaction */
        delete: operations["deleteStockTransaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactionlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List stock transaction lists */
        get: operations["getStockTransactionLists"];
        put?: never;
        /** Add stock transaction list */
        post: operations["addStockReception"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactionlist/{stocktransactionlistId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a stock transaction list
         * @description A list of stock transactions. All stock transaction can commited
         */
        get: operations["getStockTransactionList"];
        /** Replace a stock transaction list */
        put: operations["replaceStockTransactionList"];
        post?: never;
        /** Delete a Stock transaction list */
        delete: operations["deleteStockTransactionList"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactionlist/{id}/commit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk commit entries in a stock transaction list */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["StockTransactionCommitRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockTransactionCommitResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactionlistfromorderlistid/{orderlistid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add stock transaction list from orderlistid */
        post: operations["addStockFromOrderlistid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactionlistfromorderlistid/{orderlistid}/invalid-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get invalid products */
        get: operations["getInvalidProductsFromOrderlistid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactiontags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all transaction tags */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockTransactionTagsResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Add a transaction tag */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["StockTransactionTagRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockTransactionTagResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stocktransactiontags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit a transaction tag */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["StockTransactionTagRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StockTransactionTagResponse"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a transaction tag */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suppliers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of all the suppliers. */
        get: {
            parameters: {
                query?: {
                    /** @description 1 to include only suppliers that has orders */
                    hasOrders?: number;
                    filter?: string;
                    paginationStart?: number;
                    paginationPageLength?: number;
                    /**
                     * @description Include deleted suppliers in search
                     * @example true
                     */
                    allowDeleted?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ListSupplierResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Adding a new supplier */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Ok */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SupplierRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SupplierResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/suppliers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a supplier based on id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SupplierResponse"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Edit an exisiting supplier */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SupplierRequest"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SupplierResponse"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete a supplier based on id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of ticket comments */
        get: operations["listTicketComments"];
        put?: never;
        /** Create a ticket comment */
        post: operations["addTicketComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a ticket comment */
        get: operations["getTicketComment"];
        /** Update a ticket comment */
        put: operations["updateTicketComment"];
        post?: never;
        /** Delete a ticket comment */
        delete: operations["deleteTicketComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of ticket files */
        get: operations["listTaskFiles"];
        put?: never;
        /** Add a new ticket file */
        post: operations["addTaskFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a ticket file */
        get: operations["getTaskFile"];
        put?: never;
        post?: never;
        /** Delete a ticket file */
        delete: operations["deleteTaskFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/materials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of ticket materials */
        get: operations["listTicketMaterials"];
        put?: never;
        /** Create a new ticket material */
        post: operations["addTicketMaterial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/materials/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a ticket material */
        get: operations["getTicketMaterial"];
        /** Update a ticket material */
        put: operations["updateTicketMaterial"];
        post?: never;
        /** Delete a ticket material */
        delete: operations["deleteTicketMaterial"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/materials/{id}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** a new cart. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Id to the relevant resource */
                    id: components["parameters"]["id"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DiscountArticleItem"];
                };
            };
            responses: {
                /** @description Ok */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickettags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all configs */
        get: operations["getTicketTags"];
        put?: never;
        post: operations["addTicketTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickettags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTag"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTagResponse"];
                    };
                };
            };
        };
        post?: never;
        /** Get all configs */
        delete: operations["deleteTicketTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of tickets */
        get: {
            parameters: {
                query?: {
                    /**
                     * @deprecated
                     * @description Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported.
                     */
                    filter?: string;
                    /**
                     * @description Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order.
                     * @example 1
                     */
                    sortOrder?: -1 | 1;
                    /**
                     * @description Sort by `field`.
                     * @example id
                     */
                    sortField?: string;
                    /**
                     * @description Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength.
                     * @example 100
                     */
                    paginationStart?: number;
                    /**
                     * @description Determine the number of items to fetch in one page.
                     * @example 50
                     */
                    paginationPageLength?: number;
                    /** @description Get partner store tickets */
                    withPartnerStores?: boolean;
                    /** @description List of tag ids to restrict the search to. */
                    tagids?: string[];
                    /** @description List of ids to restrict the search to. */
                    ids?: string[];
                    /** @description List of tag ids that should not be in the task. */
                    excludetagids?: string[];
                    /**
                     * @description Get all tasks updated after the given date
                     * @example 2020-01-01 00:00:00
                     */
                    updated_after?: string;
                    /**
                     * @description Get tasks where pickup (and startTime if set) is after the given date
                     * @example 2020-01-01 00:00:00
                     */
                    startDate?: string | null;
                    /**
                     * @description Get tasks where pickup (and startTime if set) is before the given date
                     * @example 2020-01-01 00:00:00
                     */
                    endDate?: string | null;
                    /** @description Id of customer assigned to the ticket */
                    customerid?: number | null;
                    /** @description Id of customer article assigned to the ticket */
                    customerarticleid?: number | null;
                    /** @description Card number of the ticket */
                    cardno?: string | null;
                    /** @description Allow deleted tickets in response */
                    allowDeleted?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketListResponse"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new ticket */
        post: operations["addTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a ticket */
        get: operations["getTicket"];
        /** Update a ticket */
        put: operations["updateTicket"];
        post?: never;
        /** Delete a ticket */
        delete: operations["deleteTicket"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/duplicate/{ticketId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Duplicate a ticket from a ticketid (sets it as draft mode) */
        post: operations["duplicateTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/{ticketId}/barcode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add task materials to ticket from barcodes */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: components["parameters"]["ticketId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        barcodes?: string[];
                    };
                };
            };
            responses: {
                /** @description Ticket material was successfully added to the ticket */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketMaterialListResponse"];
                    };
                };
                /** @description Not found */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servicenotification/autocreate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create servicenotices for specified customerarticles based on what would be selected by default when creating servicenotices via UI. Returns success status for each customerarticle */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AutoCreateServiceNotices"];
                };
            };
            responses: {
                /** @description Attempted to create servicenotices for the specified customerarticles. The result show the success status for each customerarticle */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AutoCreateServiceNoticesResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servicenotification/bulkdelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete servicenotices for specified customerarticles based on what would be selected by default when deleting servicenotices via UI. Returns success status for each customerarticle */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BulkDeleteServiceNotices"];
                };
            };
            responses: {
                /** @description Attempted to delete servicenotices for the specified customerarticles. The result show the success status for each customerarticle */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BulkDeleteServiceNoticesResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all templates */
        get: operations["getTicketTemplates"];
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplate"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-templates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateResponse"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplate"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-templategroups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all configs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchTicketTemplateGroup"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplateGroup"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateGroupResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-templategroups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateGroupResponse"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplateGroup"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateGroupResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateGroupResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-templates/{ticketTemplateId}/materials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all configs */
        get: operations["tickettag"];
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketTemplateId: components["parameters"]["ticketTemplateId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplateMaterial"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateMaterialResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket-templates/{ticketTemplateId}/materials/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketTemplateId: components["parameters"]["ticketTemplateId"];
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateMaterialResponse"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketTemplateId: components["parameters"]["ticketTemplateId"];
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplateMaterial"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateMaterialResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketTemplateId: components["parameters"]["ticketTemplateId"];
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateMaterialResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket/{ticketId}/templates": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticketId: components["parameters"]["ticketId"];
            };
            cookie?: never;
        };
        /** Get all templates */
        get: operations["getTicketTemplateRelations"];
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: components["parameters"]["ticketId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplateRelation"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchTicketTemplateRelationResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket/{ticketId}/templates/{ticketTemplateId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticketId: components["parameters"]["ticketId"];
                ticketTemplateId: components["parameters"]["ticketTemplateId"];
            };
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: components["parameters"]["ticketId"];
                    ticketTemplateId: components["parameters"]["ticketTemplateId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetTicketTemplateRelation"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketTemplateRelationResponse"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ticketId: components["parameters"]["ticketId"];
                    ticketTemplateId: components["parameters"]["ticketTemplateId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchTicketTemplateRelationResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get all users */
        get: operations["getUsers"];
        put?: never;
        /** Add user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetUser"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserRespond"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/passcode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        /** Set user passcode */
        put: operations["setPasscode"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/password": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        /** Set user password */
        put: operations["setPassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetUser"];
                };
            };
            responses: {
                /** @description Ok */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserRespond"];
                    };
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                "2XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                "4XX": {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BamdeskDevice: {
            /**
             * @description A unique BamdeskDevice id
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The name of the BamdeskDevice
             * @example Payment terminal
             */
            title?: string;
            /**
             * @description The connection state of the BamdeskDevice.
             * @example CONNECTED
             */
            state?: string | null;
            /**
             * @description The derived connection state of the BamdeskDevice.
             * @example CONNECTED
             * @enum {string|null}
             */
            readonly derivedstate?: "CONNECTED" | "AUTO_DISCOVERY" | "BAMDESK_NOT_RUNNING" | null;
            /**
             * @description The timestamp of the time the device was last used
             * @example 2020-01-30 10:00:00
             */
            lastactivity?: string | null;
            /** @description no idea */
            printdeskid?: string | null;
            /**
             * @description The IP of the BamdeskDevice
             * @example 192.168.1.120
             */
            ip?: string | null;
            secretkey?: string | null;
        };
        /** @description Billing data for the store */
        BillingAccount: {
            warning?: components["schemas"]["BillingWarning"];
            /** @description true if account is active */
            active?: boolean;
            /** @description Date for when a dunning must be paid */
            invoiceDueDate?: string | null;
            /** @description Date for when trial ends */
            trialEnds?: string | null;
            activeModules?: components["schemas"]["BillingModules"];
            limits?: components["schemas"]["BillingLimits"];
            /** @description Data of the current signup subscription if. Null if not signed up */
            subscription?: {
                /** @description True if the subscription is active */
                active?: boolean;
                /** @description The date for when the subscription started or is expected to start */
                startDate?: string;
                /**
                 * @description Plan the subscription is signed up to
                 * @enum {string}
                 */
                plan?: "empty" | "starter" | "scaler" | "professional";
            } | null;
        };
        BillingLimit: {
            max?: number;
            current?: number;
            showwarning?: boolean;
        };
        BillingLimits: {
            monthlytasks?: components["schemas"]["BillingLimit"];
            maxusers?: components["schemas"]["BillingLimit"];
            cashregisters?: components["schemas"]["BillingLimit"];
            loyaltymembers?: components["schemas"]["BillingLimit"];
            products?: components["schemas"]["BillingLimit"];
        };
        /** @description for each module, true if the module is active and subscription is active */
        BillingModules: {
            statistics?: boolean;
            pos?: boolean;
            products?: boolean;
            masterdata?: boolean;
            economic?: boolean;
            dinero?: boolean;
            woocommerce?: boolean;
            shopify?: boolean;
            smartweb?: boolean;
            mobilepay?: boolean;
            servicewidget?: boolean;
            inventorycount?: boolean;
            tickets?: boolean;
            loyalty?: boolean;
            shopping?: boolean;
            partner_sharing?: boolean;
            rackbeat?: boolean;
            recurring_payments?: boolean;
            serviceplans?: boolean;
            custompaymenttypes?: boolean;
        } & {
            [key: string]: unknown;
        };
        /** @enum {string|null} */
        BillingWarning: "TrialEnded" | "Inactive" | "InTrial" | "Invoice" | "MissingCard" | "OutOfTasks" | "LoyaltyMembers" | null;
        BundleResponse: {
            content?: components["schemas"]["Bundle"];
        };
        BundleRequest: {
            content?: components["schemas"]["Bundle"];
        };
        Bundle: {
            /**
             * @description A unique bundle id
             * @example 1
             */
            readonly id?: number | null;
            /** @description title for bundle */
            title: string;
            /** @description The cost of the bundle */
            amount: number;
            /** @description Start date of when the bundle is valid */
            startdate?: string | null;
            /** @description End date of the bundle */
            enddate?: string | null;
            filters?: components["schemas"]["BundleFilter"][] | null;
            /**
             * Format: date-time
             * @description When the bundle was last updated
             */
            readonly updated_at?: string | null;
            /**
             * Format: date-time
             * @description When the bundle was created
             */
            readonly created_at?: string | null;
        };
        SearchBundleResponse: {
            content?: components["schemas"]["Bundle"][];
            /**
             * @deprecated
             * @description amount of bundles
             */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        Supplier: {
            /**
             * @description A unique id for a supplier
             * @example 1
             */
            readonly id?: number | null;
            /**
             * @description The name of a supplier
             * @example Johnson
             */
            name?: string;
            /**
             * @description The mail of a supplier
             * @example johnson@doe.com
             */
            email?: string | null;
            /**
             * @description Customer number for the supplier
             * @example 2413
             */
            customerno?: string | null;
            /**
             * @description Address of the supplier
             * @example A place
             */
            address?: string | null;
            /**
             * @description Which city the supplier is from
             * @example London
             */
            city?: string | null;
            /**
             * @description Zipcode of the supplier
             * @example 2412
             */
            zipcode?: string | null;
            /** @example Sells bike parts */
            note?: string | null;
            /** @description Slug for the supplier based on the name */
            handle?: string | null;
            /** @description Accountnumber for the supplier, used to cross reference this supplier to a supplier in e-conomic */
            accountnumber?: number | null;
        };
        PromotionTagFilter: {
            /** @description minimum amount of products in order to apply promotion */
            amount?: number | null;
            /** @description date of when the promotion should be applied */
            date?: {
                start?: string | null;
                end?: string | null;
            } | null;
        } | null;
        /** @description A product tag */
        ProductTag: {
            /** @description The title of the tag */
            title?: string;
            /** @description The ID of the tag */
            id?: number | null;
            /** @description The accountno used for book keeping */
            accountno?: number | null;
            promotionfilter?: components["schemas"]["PromotionTagFilter"];
            /** @description Unique handle for the produttag. Will be set automatically if not set. The handle is write once, and can not be changed after the tag is created. */
            handle?: string | null;
            /**
             * @description Number used to determine order of product tags.
             * @example 23.04
             */
            position?: number | null;
            /** @description If this is set, the position of this product tag will be between positionafterid and the tag below if it exists. */
            positionafterid?: number | null;
            /** @description If this is set, the position of this product tag will be between positionbeforeid and the tag above if it exists. */
            positionbeforeid?: number | null;
        };
        /**
         * @description < `normal` vat calculation is based on `price` `second_hand` vat calulation is based on `price - costprice`
         * @enum {string}
         */
        VATMode: "normal" | "second_hand";
        /** @description A Product's image */
        ProductImage: {
            readonly blurhash?: string | null;
            readonly preview_url?: string;
            readonly full_url?: string;
        };
        /** @description The representation of a product. */
        Product: {
            /** @description A unique product ID */
            readonly id?: number | null;
            /**
             * @description Product name
             * @example Scott Scale 960
             */
            title?: string;
            /** @description The product no. This must be unique. If serieno is set we allow multiple products to have the same product no. For new products this value must be at most 25 chars */
            productno?: string;
            /** @description A unique barcode */
            barcode?: string | null;
            /** @description This will be used when searching for a barcode, if it could not find the product, it will search for alternative barcodes for the product. You can include multiple barcodes by separating it with spaces. It will not be used in print, for example price label/sign, instead "barcode" is used. */
            alternativebarcode?: string | null;
            serieno?: string | null;
            /**
             * Format: double
             * @description Price of the product. By default price includes VAT but can be changed in the store config "prices_include_vat".
             * @example 100
             */
            price?: number | null;
            /**
             * Format: double
             * @description Consistently give the calculcated price without VAT. Regardless of the value of store config "prices_include_vat"
             * @example 80
             */
            readonly pricewithoutvat?: number | null;
            /**
             * Format: double
             * @description Cost price of the product excl. VAT
             * @example 8.65
             */
            costprice?: number | null;
            /**
             * Format: double
             * @description Recommended retail price of the product
             * @example 99.95
             */
            recommendedretailprice?: number | null;
            /** @description Number of items in stock. Set to null to disable stock keeping. Change this value if you want to overwrite the stock number. This will trigger a stock transaction rest hook If you want update stock number relative, add a stock transaction and use addtostock. */
            stockno?: number | null;
            /**
             * @deprecated
             * @description Deprecated. Use stock transactions. Previous stockno value. Only set in RestHook events; in product.updated if stockno has changed; and always in product.created with a value of 0
             */
            readonly previousstockno?: number | null;
            /**
             * @deprecated
             * @description Deprecated. Use stock transactions. Type of stockno change. Only set in RestHook events; in product.updated if stockno has changed; and always in product.created with a value of 'absolute'. When relative it indicates adding or removing (e.g. selling) items from inventory. When absolute it indicates taking inventory, e.g. setting an initial value or correcting an errornous value. See also stocknochangeisrelative in SetProduct.
             * @enum {string|null}
             */
            readonly stocknochangetype?: "absolute" | "relative" | null;
            /**
             * @description The minimum number of items that must be in stock before the product is in the state of needs ordering
             * @default null
             */
            stockmin?: number | null;
            /**
             * @description Used to suggest the number of items to be ordered when the product is added to the ordering list.
             * @default null
             */
            stockmax?: number | null;
            /**
             * @deprecated
             * @description This field is obsolete and therefore can't add a supplier using this field. If you want to add a supplier use the "suppliers" field instead
             */
            readonly suppliername?: string | null;
            /** @description List of suppliers attached to the product. If you leave supplier id empty, any suppliername that does not exits will be created. */
            suppliers?: components["schemas"]["Supplier"][] | null;
            color?: string | null;
            styleno?: string | null;
            size?: string | null;
            brand?: string | null;
            /**
             * Format: double
             * @description The VAT of the product in percent. Should in most cases be NULL. NULL will default the VAT value to the one specified in store config (25 % for DK customers)
             */
            vat?: number | null;
            /** @description The date for when the product was last ordered. Can only be set while create a shoppinglistorder */
            readonly lastordered?: string | null;
            /**
             * @description List of product tags.  Hint, if you leave tag id empty, any tag that does not exist will be created.
             * @default []
             */
            tags?: components["schemas"]["ProductTag"][];
            /** @description Field for custom product data */
            customfield1?: string | null;
            customfield2?: string | null;
            customfield3?: string | null;
            customfield4?: string | null;
            readonly created?: string | null;
            /** @description Number of items of this product reserved on open tickets */
            readonly reservedstock?: number | null;
            /** @description The sum of serial products in stock */
            readonly totalstock?: number | null;
            /** @description The sum of serial products available */
            readonly totalavailablestock?: number | null;
            /** @description Number of items that needs to be ordered. Based on stockmin, stockmax and whats already on shopping list. */
            readonly tobeordered?: number | null;
            /** @description Number of items already on shopping list. */
            readonly onshoppinglist?: number | null;
            /** @description Number of items currently in order */
            readonly ordered?: number | null;
            /** @description True if the product is in low stock and needs to be ordered.  Based on stockmin, stockmax and whats already in order. */
            readonly needsordering?: number | null;
            /** @description The discounted price of the product. The discountprice can only be changed if the field is the defined in body with PUT requests. If a promotion exists for a product, and a discountprice is set to a product, the discount chosen would be the best discount for the product, which makes the product the cheapest. If you want to include discountprice for a specific product with discountprice use "includeDiscountPrice" in query and set the value to 1. */
            discountprice?: number | null;
            /**
             * Format: double
             * @description The calculated VAT for the product's price field.
             */
            readonly calculcatedvat?: number | null;
            /** @description Permalink to a products webshop page, this is used when fetching Opengraph images. */
            webshopurl?: string | null;
            vatmode?: components["schemas"]["VATMode"];
            /**
             * @description Timestamp for when the last time the customer is updated.
             * @example 2022-03-10 00:00:00
             */
            updated_at?: string | null;
            /** @description The owner storeid */
            readonly storeid?: number | null;
            readonly image?: components["schemas"]["ProductImage"];
            /**
             * @description True by default. Enables the shopping-cart icon for the product that makes the product available to be ordered.
             * @default 1
             */
            availabletoorder?: number;
            /**
             * @description Whether or not to sync changes to webshop.
             * @default 0
             */
            syncproductdatawebshop?: boolean | null;
        };
        BundleFilter: {
            /** @example 1 */
            readonly id?: number | null;
            /** @description Which bundle this filter is attached to */
            bundleid: number;
            /**
             * @description Which attribute to check the bundle on
             * @enum {string}
             */
            attribute: "productno" | "producttag" | "styleno";
            /** @description The value to check on in order to validate the bundle */
            value: string[];
            products?: components["schemas"]["Product"][] | null;
            producttags?: components["schemas"]["ProductTag"][] | null;
            /** @description The amount of times the item should be applied before the bundle is valid */
            quantity: number;
            /**
             * Format: date-time
             * @description When the bundle was last updated
             */
            readonly updated_at?: string | null;
            /**
             * Format: date-time
             * @description When the bundle was created
             */
            readonly created_at?: string | null;
        };
        BundleFilterResponse: {
            content?: components["schemas"]["BundleFilter"];
        };
        BundleFilterRequest: {
            content?: components["schemas"]["BundleFilter"];
        };
        SearchBundleFilterResponse: {
            content?: components["schemas"]["BundleFilter"][];
        };
        SetPaymentMethod: {
            content?: components["schemas"]["POSPaymentMethodRelation"];
            /** @description The id of the payment method that should be after the edited payment method */
            positionafterid?: number | null;
            /** @description The id of the payment method that should be before the edited payment method */
            positionbeforeid?: number | null;
        };
        SetPaymentMethodResponse: {
            content?: components["schemas"]["POSPaymentMethodRelation"];
        };
        PaymentMethodResponse: {
            content?: components["schemas"]["POSPaymentMethodRelation"][];
        };
        POSPaymentMethodRelation: {
            /**
             * @description A unique POS cash register payment type relation id
             * @example 1
             */
            readonly id?: number;
            /**
             * @description A unique POS register id
             * @example 1
             */
            poscashregisterid?: number;
            /**
             * @description A unique payment provider id
             * @example 1
             */
            paymentproviderid?: string | null;
            /**
             * @description The type of the payment provider
             * @example paymenttype
             */
            paymentprovidertype?: components["schemas"]["PaymentProviderType"];
            paymentprovider?: components["schemas"]["POSPaymentProvider"];
            /**
             * @description The position of the payment provider in the list of payment providers
             * @example 1
             */
            position?: number;
            /**
             * @description The color of the associated button
             * @example #000000
             */
            btnColor?: string | null;
        };
        /**
         * @description The type of the payment provider
         * @example paymenttype
         * @enum {string}
         */
        PaymentProviderType: "nets" | "bamdesk" | "paymenttype" | "cash" | "giftcard" | "invoice" | "economic" | "recurringpayment" | "stripe" | "mobilepay" | "vipps";
        POSPaymentProvider: (string | null) | components["schemas"]["GenericPaymentProvider"] | components["schemas"]["BamdeskDevice"] | components["schemas"]["StripeReader"] | components["schemas"]["NetsDevice"] | components["schemas"]["PaymentType"];
        GenericPaymentProvider: {
            /**
             * @description The title of the payment provider
             * @example Payment type
             */
            title?: string;
        };
        StripeReader: {
            /** @description The reader id */
            id?: string;
            /** @description The reader action */
            action?: string | null;
            /** @description The reader object */
            object?: string;
            /** @description The reader software version */
            device_sw_version?: string;
            /** @description The reader hardware type */
            device_type?: string;
            /** @description The reader ip address */
            ip_address?: string;
            /** @description The reader label */
            label?: string;
            /** @description Whether the reader is in livemode or not */
            livemode?: boolean;
            /** @description The reader's location */
            location?: string;
            /** @description The reader metadata */
            metadata?: Record<string, never>[] | null;
            /** @description The reader serial number */
            serial_number?: string;
            /** @description The reader status (e.g. "online") */
            status?: string;
        } & {
            [key: string]: unknown;
        };
        NetsDevice: {
            readonly id?: number | null;
            terminalid: string;
            title: string;
            ip?: string | null;
        };
        PaymentType: {
            /**
             * @description A unique payment type id
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The name of a payment type
             * @example Cash
             */
            title?: string;
            /**
             * @description The account number associated with the payment type
             * @example 1234
             */
            accountno?: string | null;
            /**
             * @description The currency associated with the payment type
             * @example DKK
             */
            currency?: string | null;
            /**
             * @description The exchange rate of the given currency (if any) to the store's main currency.
             * @example 7.5
             */
            exchangerate?: number | null;
            /**
             * @description Whether or not the payment type is physical cash
             * @default 0
             * @example 0
             */
            cash?: number;
            /** @description Included when deleted payment types are allowed */
            readonly disabled?: number | null;
        };
        CustomerArticle: {
            /**
             * @description A unique CustomerArticle ID
             * @example 1
             */
            readonly id?: number | null;
            /**
             * @description The date the customertarticle was created
             * @example 2019-08-27 10:00:00
             */
            readonly dateadded?: string | null;
            /**
             * @description The ID of the customer the customerarticle belongs to
             * @example 1
             */
            customerid?: number;
            /** @description Only mapped if query "mapcustomer" is set to 1. */
            customer?: components["schemas"]["Customer"];
            /** @example Kildemoes Cykel */
            title?: string;
            /** @example 1231232 */
            serieno?: string | null;
            /** @example Blue */
            color?: string | null;
            /** @example Large */
            size?: string | null;
            /** @example Gear */
            customfield1?: string | null;
            /** @example 123123 */
            customfield2?: string | null;
            /** @example 123123 */
            customfield3?: string | null;
            /** @example 123123 */
            customfield4?: string | null;
            /** @description ID of the owning store */
            storeid?: number;
            readonly servicesubscription?: components["schemas"]["ServiceSubscription"];
            /**
             * @deprecated
             * @description Whether or not the customer article has any service notices, check servicenotices_count instead
             */
            readonly hasservicenotices?: boolean;
            /** @description Amount of service notices */
            readonly servicenotices_count?: number;
            /** @description Your permission to the customer article. */
            readonly permission?: components["schemas"]["PartnerPermissionAccess"];
            /** @description If 1 this means that the customerarticle is deleted, 0 is not deleted. */
            readonly deleted?: number | null;
            /**
             * @description Timestamp for when the last time the customer is updated.
             * @example 2022-03-10 00:00:00
             */
            updated_at?: string | null;
            /**
             * @description Timestamp of when the customerarticle was last sold on a payment (this does not include return payments)
             * @example 2022-03-10 00:00:00
             */
            readonly last_sold_at?: string | null;
        };
        /** @description Response when requesting a list of customer articles */
        CustomerArticleListResponse: {
            content?: components["schemas"]["CustomerArticle"][];
            /** @deprecated */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description Response when requesting a customer article */
        CustomerArticleResponse: {
            content?: components["schemas"]["CustomerArticle"];
        };
        /** @description The body of the request used for creating / updating CustomerArticles */
        SetCustomerArticle: {
            content?: components["schemas"]["CustomerArticle"];
            createsubscription?: components["schemas"]["ServiceSubscription"];
            removesubscription?: boolean | null;
        };
        /** @description The body of the request used for switching the customer of a customer article */
        SwitchCustomerQuery: {
            /**
             * @description The ID of the new customer to transfer the customer article to
             * @example 1
             */
            newCustomerId: number;
            /**
             * @description If not 0, the service notifications will be transferred to the new customer
             * @default 0
             * @example 0
             */
            transferServiceNotifications?: number;
        };
        BulkDeleteCustomerArticles: {
            /** @description Array of customer article ids */
            content?: number[];
        };
        /** @description Response for bulk deleting customer articles */
        BulkDeleteCustomerArticlesResponse: {
            /** @description Array of responses with success status */
            content?: components["schemas"]["BulkDeleteCustomerArticlesResponseItem"][];
        };
        /** @description Response for deleting a customer article */
        BulkDeleteCustomerArticlesResponseItem: {
            /** @description customer article id */
            id?: number;
            /** @description true if success, false if it failed to delete the customer article */
            success?: boolean;
            /** @description Exception message of a failed deletion of a customer article */
            message?: string | null;
        };
        /** @description A customer tag */
        CustomerTag: {
            /** @description The title of the tag */
            title: string;
            /** @description The id of the tag */
            id?: number | null;
            /** @description Unique handle for the produttag. Will be set automatically if not set. This value cannot be changed once set. */
            handle?: string | null;
        };
        /** @description The representation of a customer. */
        Customer: {
            /**
             * @description A unique customer ID
             * @example 1
             */
            readonly id?: number;
            /**
             * @description ID for the store for which the customer is associated
             * @example 1
             */
            readonly storeid?: number;
            /** @example 2019-01-02 01:02:03 */
            readonly createddate?: string | null;
            /**
             * @description The name of the customer.
             * @example John Doe
             */
            name?: string | null;
            /**
             * @description The phone number of the customer. Should start with country code, like +45. If not, assume +45.
             * @example +4533608586
             */
            phone?: string | null;
            /**
             * @description Phone number in E.164 format, might sometimes be the same as "phone" but this field is guaranteed to be in E.164 format
             * @example +4533608586
             */
            readonly phone_e164?: string | null;
            /**
             * @description The country of the phone number. Must be in format ISO 3166-1 alpha-2.
             * @example dk
             */
            country?: string | null;
            /**
             * @description The email of the customer.
             * @example johndoe@example.com
             */
            email?: string | null;
            /**
             * @description The address of the customer.
             * @example Andebyvej 1
             */
            address?: string | null;
            /**
             * @description The city of the customer.
             * @example Odense
             */
            city?: string | null;
            /**
             * @description The zip code of the customer.
             * @example 5000
             */
            zipcode?: string | null;
            /**
             * @description The country of the customers address.
             * @example dk
             */
            addr_country?: string | null;
            /**
             * Format: double
             * @description The latitude of the customer.
             */
            readonly lat?: number | null;
            /**
             * Format: double
             * @description The longitude of the customer.
             */
            readonly lng?: number | null;
            /** @example 1993-12-31 */
            birthdate?: string | null;
            /**
             * @description The EAN number associated with the customer. Must be a valid EAN.
             * @example 12345678
             */
            ean?: string | null;
            /**
             * @description The VAT/CVR number associated with the customer.
             * @example 12345678
             */
            vat?: string | null;
            /**
             * @description The customer-number associated with the customer.
             * @example 19181715
             */
            customerno?: string | null;
            /**
             * @description The e-conomic number of the customer.
             * @example 12345678
             */
            economic_customernumber?: number | null;
            /**
             * @deprecated
             * @description The customer's balance in e-conomic
             * @example 256.64
             */
            economic_balance?: number | null;
            /**
             * @description The customer's balance
             * @example 123.45
             */
            balance?: number | null;
            /**
             * @description A note about the customer.
             * @example Pays on time.
             */
            note?: string | null;
            /**
             * @description Whether or not the customer is in draft mode
             * @example 0
             */
            draft?: number;
            /**
             * @description Whether or not the customer is deleted
             * @example 0
             */
            readonly deleted?: number;
            /**
             * @description Tags associated with the customer.
             * @default []
             */
            tags?: components["schemas"]["CustomerTag"][];
            /**
             * @description Timestamp for if when the permission has been granted. `null` if permission hasn't been granted.
             * @default null
             * @example 2022-03-10 00:00:00
             */
            permission_marketing?: string | null;
            /**
             * @description Timestamp for when the last time the customer is updated.
             * @example 2022-03-10 00:00:00
             */
            updated_at?: string | null;
            /**
             * @description Timestamp for when the last time the customer is deleted.
             * @example 2022-03-10 00:00:00
             */
            deleted_at?: string | null;
            /** @description The customers loyalty point balance */
            readonly loyaltypointsbalance?: number | null;
            /** @description Datetime of when the customer joined the loyalty club. If null, the customer is not part of the loyalty club */
            readonly loyalty_member_since?: string | null;
            /** @description Name of partner store that customer is registered in. requires scope 'customerlookup' */
            readonly store?: {
                /**
                 * @description Store id
                 * @example 1
                 */
                readonly id?: number;
                /** @description Store title */
                readonly title?: string;
            };
        };
        /** @description A service notification sms template */
        ServiceNotificationTemplate: {
            /**
             * @description Id of the template
             * @example 12
             */
            readonly id?: number;
            /**
             * @description The title of the template
             * @example 1. Service
             */
            title?: string | null;
            /** @description Boolean determening whether the call should be selected by default in the modal */
            enabled?: boolean;
            /**
             * @description If the template is absolute, this is how many days has to pass from "NOW()" till when the sms is sent out
             * @example 60
             */
            days?: number;
            /**
             * @description The template of which the sms text will be generated from
             * @example Hej [customer_name] det er tid til første service af din nye cykel. Kig ind eller ring til os på [store_phone]
             */
            template?: string | null;
            /** @description Boolean that determines if the template is absolute, meaning the date of when the call is sent out is determind in "days" instead of a specific month, day and year */
            absolute?: boolean;
            /**
             * @description The exact date and time of when the service call will be sent out, this is relative to when the service call template is requested
             * @example 2027-11-01T12:00:00+01:00
             */
            readonly noticedate?: string | null;
            /**
             * @description If absolute == false. Specific date of the month of when call is sent out
             * @example 2
             */
            day?: number | null;
            /**
             * @description If absolute == false. Specific month of when call is sent out
             * @example March
             */
            month?: string | null;
            /**
             * @description If absolute == false. Specify the number of year that must pass before the notification is sent
             * @example 3
             */
            year?: number | null;
            /**
             * @description Whether or not to include notices generated from this template in servicecard print
             * @default true
             */
            includeinprint?: boolean;
            /**
             * @description The id of the group of which this call template belongs to
             * @example 12
             */
            task_service_group_id?: number;
            /**
             * @description The date and time this ServiceNotificationTemplate was deleted. Null if it is not deleted
             * @example 2024-02-23T09:37:20.000000Z
             */
            deleted_at?: string | null;
        };
        /** @description A group of service notification templates */
        ServiceNotificationTemplateGroup: {
            /** @description Id of the group */
            id?: number;
            /**
             * @description Title of the group
             * @example El-cykel
             */
            title: string;
            /** @description Boolean determening whether the group will be selected by default */
            enabled: boolean;
            /** @description Product tags assoicated with the group */
            producttags?: components["schemas"]["ProductTag"][] | null;
            /**
             * @description VAT associated with the group
             * @default null
             */
            vatmode?: string | null;
            /** @description Array of templates associated with this group */
            templates?: components["schemas"]["ServiceNotificationTemplate"][] | null;
            /**
             * @description The date and time this ServiceNotificationTemplateGroup was deleted. Null if it is not deleted
             * @example 2024-02-23T09:37:20.000000Z
             */
            deleted_at?: string | null;
        };
        ServicePlan: {
            /**
             * @description A unique service id
             * @example 1
             */
            readonly id?: number | null;
            /** @description title for service */
            title?: string;
            /** @description Unique handle for service. Will be set automatically if not set */
            handle?: string | null;
            /**
             * @deprecated
             * @description Which servicegroup should automatically be selected, if the service is on a customerarticle
             */
            servicecallgroupid?: number | null;
            /** @description An array of which servicegroup should automatically be selected, if the service is on a customerarticle */
            servicecallgroupids?: number[] | null;
            /** @deprecated */
            readonly servicecallgroup?: components["schemas"]["ServiceNotificationTemplateGroup"];
            readonly servicecallgroups?: components["schemas"]["ServiceNotificationTemplateGroup"][] | null;
            /**
             * @deprecated
             * @description Array of producttag ids where this service can be applied to. If tagid 1 and 2 is set as restriction, the product have to at least one of them in order to be included in the search
             */
            producttagidsrestriction?: number[] | null;
            /** @description Array of producttag handles where this service can be applied to. If handle bike and mountainbike is set as restriction, the product have to at least one of them in order to be included in the search. */
            producttaghandlesrestriction?: string[] | null;
            /** @description Array of producttags where this service can be applied to. */
            readonly producttagsrestriction?: components["schemas"]["ProductTag"][] | null;
            /**
             * @description Determines what types of products this plan is visible for. All makes the plan visible for products with normalvat and secondhandvat
             * @enum {string}
             */
            visibility?: "all" | "secondhandvat" | "normalvat";
            /** @description If set, when adding a serviceplan to a serial product, it will create a material with the given price, and set the type of the material as "serivceplan" */
            price?: number | null;
            /** @description If set, when adding a serviceplan, an enddate is set to be x months from startdate for a subscription */
            terms?: number | null;
            /**
             * Format: date-time
             * @description When the service was last updated
             */
            readonly updated_at?: string | null;
            /**
             * Format: date-time
             * @description When the service was created
             */
            readonly created_at?: string | null;
            /**
             * Format: date-time
             * @description When the service was soft deleted
             */
            readonly deleted_at?: string | null;
            /**
             * @deprecated
             * @description When adding a service to a customerarticle, the product with the given followproductno will added as an additional material.
             */
            followproductno?: string | null;
        };
        Permission: {
            readonly read?: boolean;
            readonly write?: boolean;
        };
        ServiceSubscription: {
            /**
             * @description A unique service id
             * @example 1
             */
            readonly id?: number | null;
            /** @description Which customer article that has been assigned to this subcription */
            customerarticleid?: number;
            /** @description The id of the serviceplan it is attached to. */
            serviceplanid?: number | null;
            readonly serviceplan?: components["schemas"]["ServicePlan"];
            /**
             * @description Whether or not the subscription is in draft mode or not.
             * @default 0
             */
            draft?: number | null;
            /**
             * Format: date-time
             * @description When the service was last updated
             */
            readonly updated_at?: string | null;
            /**
             * Format: date-time
             * @description When the service was created
             */
            readonly created_at?: string | null;
            /**
             * Format: date-time
             * @description When the service was deleted
             */
            readonly deleted_at?: string | null;
            /** @description When the service has started */
            startdate?: string | null;
            /** @description When the service is supposed to end. Set if the serviceplan has terms */
            enddate?: string | null;
            /** @description The price of the serviceplan when the service was activated */
            price?: number | null;
            permission?: components["schemas"]["Permission"];
            /** @description Whether or not the subscription is active, by looking at start- and enddate compared to today */
            active?: boolean | null;
        };
        /** @enum {string} */
        PartnerPermissionAccess: "none" | "readonly" | "full";
        /** @description The customer tags used by a store. */
        CustomerTagsResponse: {
            content?: components["schemas"]["CustomerTag"][];
            /**
             * @deprecated
             * @description The total number of customer tags found
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description The representation of a customer response */
        CustomerResponse: {
            content?: components["schemas"]["Customer"];
        };
        /** @description The body of the request used for creating / updating customers */
        SetCustomer: {
            content?: components["schemas"]["Customer"];
            /** @description Whether or not it should be synced to economic, default is false */
            synctoeconomic?: boolean | null;
        };
        /** @description The representation of a customer search. */
        SearchCustomerResponse: {
            content?: components["schemas"]["Customer"][];
            /**
             * @deprecated
             * @description The total number of customers found by the query if ignoring pagination. Is null if `count` was not specified in the query parameter.
             */
            count?: number | null;
            /** @description True if there are more customers to receive than the current pagination allowed. */
            hasMore?: boolean;
        };
        CustomFieldRequest: {
            content?: components["schemas"]["CustomField"];
        };
        CustomFieldResponse: {
            content?: components["schemas"]["CustomField"];
        };
        SearchCustomFieldResponse: {
            content?: {
                product?: {
                    customfield1?: components["schemas"]["CustomField"];
                    customfield2?: components["schemas"]["CustomField"];
                    customfield3?: components["schemas"]["CustomField"];
                    customfield4?: components["schemas"]["CustomField"];
                };
                customerarticle?: {
                    customfield1?: components["schemas"]["CustomField"];
                    customfield2?: components["schemas"]["CustomField"];
                    customfield3?: components["schemas"]["CustomField"];
                    customfield4?: components["schemas"]["CustomField"];
                };
            };
        };
        CustomField: {
            /**
             * @description The title of the CustomField
             * @example Gear
             */
            title?: string;
            /**
             * @description The endpoint of the CustomField
             * @example product
             */
            readonly endpoint?: string;
            /**
             * @description Which CustomField it maps to
             * @example customfield1
             */
            readonly attribute?: string;
            /**
             * @description Whether or not a customfield is required
             * @example 1
             */
            required?: boolean;
            /** @description Whether or not a customfield is activated */
            activated?: boolean;
            /** @description Wheter or not the customfield shows up on variant create/edit UI */
            show_on_variant?: boolean;
        };
        DiscountTagResponse: {
            content?: components["schemas"]["DiscountTag"];
        };
        DiscountTagRequest: {
            content?: components["schemas"]["DiscountTag"];
        };
        DiscountTag: {
            /**
             * @description A unique discount tag id
             * @example 1
             */
            readonly id?: number | null;
            /**
             * @description Label for the discount
             * @example Bestillingsvarer
             */
            label?: string;
            /** @description Unique handle for discounttag. Will be set automatically if not set */
            handle?: string | null;
        };
        SearchDiscountTagResponse: {
            content?: components["schemas"]["DiscountTag"][];
        };
        ErrorResponse: {
            /** @description Description of the error */
            message: string;
            errorcode: components["schemas"]["ErrorCode"];
            /**
             * @description HTTP response status code
             * @example 404
             */
            code: number;
            /** @description A reference to the log entry if the error was logged. */
            logid?: string | null;
            /** @description A reference to the customer. NULL if no customer is authenticated */
            storeid?: number | null;
            /** @description An object with extra error information */
            metadata?: Record<string, never>;
            /** @description An object with debugging information. Only visible in development mode */
            debug?: Record<string, never>;
            info?: string;
        };
        /** @enum {string} */
        ErrorCode: "PRODUCT_PRODUCTNO_EXISTS" | "PRODUCT_PRODUCTNO_INVALID" | "PRODUCT_SERIENO_EXISTS" | "PRODUCT_CANNOT_CHANGE_TO_SERIENO" | "PRODUCT_BARCODE_EXISTS" | "PRODUCT_TITLE_INVALID" | "PRODUCT_TAG_NOT_FOUND" | "PRODUCT_INVALID_STOCKNO" | "PRODUCT_NOT_AVAILABLE" | "PRODUCT_NOT_FOUND" | "QUERY_FILTER" | "BILLING_MODULE_NOT_ACTIVE" | "BILLING_SUBSCRIPTION_NOT_ACTIVE" | "BILLING_PRODUCT_REACHED_LIMIT" | "USER_ALREADY_IN_USE" | "USER_NO_LOGIN_LEFT" | "USER_CANT_DELETE_MAINUSER" | "USER_CANT_RESTRICT_MAINUSER" | "USER_CANT_RESTRICT_SELF" | "SMS_PREPAYMENT_FAILED" | "AUTH_PASSCODE_IN_USE" | "AUTH_RECAPTCHA_VALIDATION_FAILED" | "AUTH_EMAIL_IN_USE" | "AUTH_PASSWORD_TOO_SHORT" | "AUTH_EMAIL_INVALID" | "UNAUHTORIZED" | "TASK_ALREADY_PAID" | "REEPAY" | "ECONOMIC" | "SERVER_ERROR" | "CLIENT_ERROR" | "PRODUCT_TAG_DUPLICATE" | "POS_PRODUCT_PRICE_MISSING" | "POS_BARCODE_NOT_FOUND" | "POS_MULTIPLE_PRODUCTS_FOUND" | "ST_MULTIPLE_PRODUCTS_FOUND" | "POS_REGISTER_NOT_SELECTED" | "CUSTOMERARTICLE_RETURN_ERROR" | "POS_REGISTER_MB_CONFLICT" | "PAYMENT_NOT_PAID_ENOUGH" | "INVENTORY_SERIAL_COUNT_ERROR" | "PRODUCT_HAS_SERIAL_NUMBER" | "STORE_DELETED" | "CANNOT_DELETE_LAST_ORDER" | "PAYMENT_METHOD_NOT_FOUND" | "FILE_NOT_AN_IMAGE" | "IMAGE_TOO_BIG" | "BAD_REQUEST" | "VIPPS_MSN_NOT_FOUND" | "VIPPS_WEBHOOKS_ALREADY_REGISTERED" | "VIPPS_DELETE_HOOKS_PAYMENT_METHODS_STILL_REGISTERED";
        ValidationError: {
            name?: string;
            code?: string;
            in?: string;
            value?: string | number | boolean | Record<string, never>[] | Record<string, never>;
            expected?: string[];
            used?: string;
        };
        ValidationErrorResponse: {
            message?: string;
            errors?: components["schemas"]["ValidationError"][];
        };
        FormRequestValidationResponse: {
            message?: string;
            /** @description An object containing the properties that failed validation. Each property is an array of error messages. */
            errors?: {
                [key: string]: unknown;
            };
        };
        FinanceVoucher: {
            /** @description Voucher text */
            title: string;
            amount: number;
            /** @description Account Number */
            account: number;
            /** @description Contra-account Number */
            contraAccount?: number | null;
            /** @description Voucher currency */
            currency?: string | null;
        };
        /** @enum {string} */
        GiftCardTypes: "giftcard" | "voucher" | "deposit";
        /** @description A giftcard */
        Giftcard: {
            /** @description A unique ID */
            readonly id?: number;
            /**
             * @description a unique string to identify giftcards.
             * @example 1234567891234
             */
            giftcardno?: string;
            /**
             * Format: double
             * @description The inital amount on the giftcard. Can only be set when the gift is created
             * @example 100
             */
            amount?: number;
            /**
             * Format: double
             * @description The amount spent of the giftcard. Balance of the giftcard can be calculcated by `amount - amountspent`.
             * @default 50
             */
            amountspent?: number;
            /** @description If the giftcard was issued by a payment. */
            readonly paymentid?: number | null;
            /** @default Giftcard */
            type?: components["schemas"]["GiftCardTypes"];
            /** @description The store from which the giftcard has been issued. Can be different from the current store if giftcards are shared between stores. */
            readonly store?: components["schemas"]["Store"];
            /** @description The customer of the payment that issued the giftcard */
            readonly customer?: components["schemas"]["Customer"];
            /** @description The VAT percentage of the payment that issued the giftcard */
            readonly vat?: number | null;
            /**
             * @deprecated
             * @description To be removed
             */
            readonly productid?: number | null;
            /**
             * @deprecated
             * @description To be removed
             */
            readonly productno?: string | null;
            /** @description When the giftcard was created. */
            readonly createddate?: string;
            /** @description When the giftcard expires. Defaults to the createddate + the value of the storeconfig "giftcard_expiration_years". */
            expirationdate?: string;
            /**
             * @description If the giftcard has expired based on expirationdate.
             * @example false
             */
            readonly expired?: boolean;
            /** @description When the giftcard was deleted. */
            readonly deleted_at?: string | null;
            /**
             * @description If the giftcard has been deleted based on deleted_at.
             * @default false
             * @example false
             */
            readonly deleted?: boolean;
        };
        /** @description The representation of a giftcard transaction. */
        GiftCardTransaction: {
            /** @description Unique ID for the giftcard transaction */
            readonly id?: number;
            /** @description Unique ID for the store for which the giftcard is associated */
            readonly storeid?: number;
            /** @description Unique ID for the user who created/updated the giftcard */
            readonly userid?: number;
            /** @description Unique ID for the giftcard */
            readonly giftcardid?: number;
            /** @description Unique ID for the payment where the giftcard was used */
            paymentid?: number | null;
            /** @description Unique ID for the payment material refering to the giftcard when the giftcard was created */
            pospaymentmaterialid?: number | null;
            /**
             * Format: double
             * @description Amount adjusted when the giftcard was used/updated
             */
            readonly amountchange?: number;
            /**
             * Format: double
             * @description Current amount on the giftcard after adjustments
             */
            readonly currentamount?: number;
            /** @description Datetime for when the transaction was created */
            created_at?: string;
            /** @description Unique ID for the integration that updated the giftcard */
            readonly integrationconfigid?: number | null;
            /** @description Note added to the giftcard transaction */
            readonly note?: string | null;
        };
        /** @description The representation of a giftcard search. */
        SearchGiftcardsResponse: {
            content?: components["schemas"]["Giftcard"][];
            /**
             * @deprecated
             * @description The total number of items found by the query.
             */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description The giftcard to be created by the post. */
        PostGiftcardsRequest: {
            content?: components["schemas"]["Giftcard"];
        };
        /** @description The respone of a giftcard creation. */
        PostGiftcardsResponse: {
            content?: components["schemas"]["Giftcard"];
        };
        /** @description The giftcard to be updated. */
        PutGiftcardRequest: {
            content?: components["schemas"]["Giftcard"];
        };
        /** @description The respone of a giftcard update. */
        PutGiftcardsResponse: {
            content?: components["schemas"]["Giftcard"];
        };
        /** @description Returns giftcard if found. */
        GetGiftcardResponse: {
            content?: components["schemas"]["Giftcard"];
        };
        /** @description Returns transactions for the giftcard if found. */
        GetGiftCardTransactionsResponse: {
            content?: components["schemas"]["GiftCardTransaction"][];
            hasMore?: boolean;
        };
        CountryData: {
            /**
             * @description Country code in alpha2 format
             * @example DK
             */
            readonly code?: string;
            /**
             * @description Currency for this country
             * @example DKK
             */
            readonly currency?: string;
            /**
             * @description Price to send 1 sms to this country, in DKK
             * @example 0.48
             */
            readonly smsprice_dkk?: number;
            /**
             * @description Price to send 1 sms to this country, in EUR
             * @example 0.06
             */
            readonly smsprice_eur?: number;
            /** @description true if country is member of EU */
            readonly eu?: boolean;
        };
        /** @description Store object */
        Store: {
            readonly id?: number;
            title?: string;
            cityname?: string | null;
            zipcode?: string | null;
            streetname?: string | null;
            streetno?: string | null;
            phone?: string | null;
            email?: string | null;
            readonly created?: string;
            countrydata?: components["schemas"]["CountryData"];
        };
        /** @description A list of rest hooks. */
        RestHookResponse: {
            content?: components["schemas"]["RestHook"][];
            /**
             * @deprecated
             * @description The total number of items found by the query if ignoring pagination.
             */
            count?: number | null;
        };
        /** @description Object representing a rest hook subscription. */
        RestHook: {
            /**
             * @description A unique ID. Use this to handle this subscription.
             * @example 123
             */
            readonly id?: number;
            /**
             * @description The event being listened for.
             * @example product.created
             */
            event?: string;
            /**
             * @description The event being listened for.
             * @example https://hookb.in/Mqdd36mEeEUqaq6znxda
             */
            url?: string;
            /**
             * @description An identifier to distinguish different receivers.
             * @example zapier
             */
            receiver?: string | null;
            /**
             * @description Whether or not the hook is enabled.
             * @example 1
             * @enum {integer}
             */
            active?: 0 | 1;
            /**
             * @description Creation date of hook.
             * @example 2019-01-01 12:00:00
             */
            readonly created?: string;
            /**
             * @description Date of last time the hook got used.
             * @example 2019-01-01 12:00:00
             */
            readonly lastactivity?: string | null;
            /**
             * @description The time the hook data was last updated
             * @example 2019-01-01 12:00:00
             */
            readonly last_updated?: string;
        };
        /** @description The list of events that can be subscribed to, like `product.created`. */
        RestHookEventResponse: {
            items?: string[];
        };
        /** @description A REST hook log entry. */
        RestHookLog: {
            /**
             * @description A unique ID.
             * @example 123
             */
            readonly id?: number;
            /** @description The ID of the store which initiated the REST hook event */
            readonly storeid?: number;
            /**
             * @description The ID of the associated REST hook
             * @example 1
             */
            readonly resthookid?: number;
            /**
             * @description The UUID of the job responsible for handling the REST hook.
             * @example 9df6e604-ebe1-46a2-8f73-fb3e38ed7e22
             */
            readonly job_uuid?: string | null;
            /**
             * @description The event type of the REST hook when the hook attempt was logged.
             * @example product.updated
             */
            readonly event?: string;
            /**
             * @description The URL of the REST hook when the hook attempt was logged.
             * @example https://example.com/hook/gg1qbV0PEDFG7Voo72xk
             */
            readonly url?: string;
            /** @description The data that was posted to the URL (JSON formatted) */
            readonly payload?: string;
            /** @enum {string} */
            status?: "successful" | "failed" | "pending" | "in_progress";
            /**
             * @description The amount of attempts that have been made so far. This includes the final successful attempt, if the REST hook succeeds.
             * @example 3
             */
            readonly attempts?: number;
            /** @description A timestamp of the time when the last attempt failed. */
            readonly last_failed_date?: string | null;
            /** @description A timestamp of the time when the REST hook succeeded. */
            readonly succeeded_date?: string | null;
            /** @description The HTTP status code of the last response retrieved by the server */
            readonly last_http_status?: string | null;
            /** @description The failed reason */
            readonly last_failed_reason?: string | null;
            /**
             * @description The time the hook was put into queue
             * @example 2019-01-01 12:00:00
             */
            readonly initiated_date?: string;
        };
        /** @description A list of rest hook log entries. */
        RestHookLogResponse: {
            content?: components["schemas"]["RestHookLog"][];
            /**
             * @deprecated
             * @description The total number of items found by the query if ignoring pagination.
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description The hook information expected when subscribing to an event. */
        CreateLoyaltyTransactionRequest: {
            /**
             * @description The amount of points to adjust, can be negative if you want to deduct from the customers balance or positive if you want to add to it
             * @example -44
             */
            adjustment?: number;
            /**
             * @description The reason to give for this transaction
             * @example Manuel adjustment
             */
            reason?: string | null;
        };
        LoyaltyTransactionResponse: {
            content?: components["schemas"]["LoyaltyTransaction"];
        };
        LoyaltyTransactionsResponse: {
            content?: components["schemas"]["LoyaltyTransaction"][];
            balance?: number;
            /** @deprecated */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
            /** @description The id of the store that enrolled this customer into the loyalty club */
            lastenrolledbystoreid?: number | null;
            ispartofloyaltyclub?: boolean;
        };
        LoyaltyTransaction: {
            /** @description Id of the transaction */
            readonly id?: number;
            /**
             * @description Number of points credited or debited in this transaction, can be negative
             * @example 2
             */
            readonly amount?: number;
            /** @description Expiration date for this transaction */
            readonly expires_at?: string | null;
            /** @description Creation date for this transaction */
            readonly created_at?: string;
            /** @description Reference to pospaymentid where this transaction was created from */
            readonly pospaymentid?: number | null;
            /** @description Reference to the specific pospayment material id where this transaction was created from */
            readonly pospaymentmaterialid?: number | null;
            /** @description Reference to the customer this transaction belongs to */
            readonly customerid?: number;
            /** @description Reference to the store that created this transaction */
            storeid?: number;
            /** @description The TaskUser behind the transaction */
            userid?: number;
            /** @description Reason for the transaction, can be sale, return sale, or what the user has put in */
            reason?: string | null;
        };
        NotificationResponse: {
            content?: components["schemas"]["Notification"];
        };
        NotificationsResponse: {
            content?: components["schemas"]["Notification"][];
            /** @deprecated */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        Notification: {
            /**
             * @description The unique ID of the notification
             * @example 07d7dec1-ce02-4e51-811b-d0844b24d37c
             */
            readonly id?: string;
            /**
             * @description The specific type of the notification
             * @example App\\Notifications\\NewProduct
             */
            readonly type?: string;
            /** @description The ID of the entity (e.g. the current user) being notified */
            readonly notifiable_id?: number;
            /** @description A JSON encoded string containing any arbitrary data related to the notification */
            readonly data?: string;
            /**
             * @description The time the notification was read. If the notification is unread this value will be null
             * @example 2022-01-01 12:00:00
             */
            readonly read_at?: string | null;
            /** @description The time the notification was created. */
            readonly created_at?: string;
            /** @description The time the notification was last updated. */
            readonly updated_at?: string;
        } & {
            [key: string]: unknown;
        };
        PaginationMeta: {
            next_cursor?: string | null;
            prev_cursor?: string | null;
            current_page?: number;
            from?: number;
            last_page?: number;
            path?: string;
            per_page?: number;
            to?: number;
            total?: number;
            links?: components["schemas"]["PaginationLink"][];
        };
        PaginationLink: {
            url?: string | null;
            label?: string;
            active?: boolean;
        };
        PaginationLinks: {
            first?: string | null;
            last?: string | null;
            prev?: string | null;
            next?: string | null;
        };
        PartnerInventoryResponse: {
            content?: components["schemas"]["PartnerInventory"][];
            /** @description Total stock for all partner stores. Any store with negative inventory is omitted from this sum. */
            totalstock?: number;
            totalreserved?: number;
            totalavailable?: number;
        };
        PartnerInventory: {
            storeid?: number;
            inventory?: components["schemas"]["PartnerInventoryLevels"];
        };
        PartnerInventoryLevels: {
            productno?: string;
            stockno?: number;
            reservedstock?: number;
            availablestock?: number;
        };
        /** @enum {string} */
        PartnerPermissionType: "products" | "customers" | "customerarticles" | "giftcards" | "payments" | "promotions" | "tickets";
        PartnerPermissionResourceDerived: {
            type?: components["schemas"]["PartnerPermissionType"];
            read?: components["schemas"]["Store"][];
            write?: components["schemas"]["Store"][];
        };
        PartnerPermissionDerivedResponse: {
            content?: components["schemas"]["PartnerPermissionResourceDerived"][];
        };
        PaymentTypeRelationRes: {
            content?: components["schemas"]["PaymentTypeRelation"];
        };
        /** @description A payment transaction. */
        PaymentTypeRelation: {
            id?: number | null;
            /**
             * @description The title of the payment. E.g. 'cash' or 'Dankort'
             * @example Cash
             */
            title?: string;
            /** @description reference to user created payment type. */
            paymenttypeid?: number | null;
            /**
             * Format: double
             * @description The amount of the payment type.
             * @example 123.45
             */
            amount?: number;
            /**
             * Format: double
             * @description The unrounded amount for a cash payment. Used to calculate rounding difference
             * @example 123
             */
            readonly unroundedcash?: number | null;
            /**
             * @description Returns whether or not the payment type is cash-based.
             * @example 0
             */
            cash?: number;
            /**
             * @description If provider = 'bamdesk'. This will be the id for the messageid for Worldline card-terminal.
             * @example 4343
             */
            bamdesk_messageid?: number | null;
            /**
             * @description The account where the payment has been posted. If not applicable, it will be null.
             * @example 1234
             */
            accountno?: string | null;
            /**
             * @description 3-digit currency code if the payment is in foreign currency.
             * @example DKK
             */
            currency?: string | null;
            /**
             * Format: double
             * @description The exchange rate if the payment is in foreign currency
             */
            exchangerate?: number | null;
            /** @description Index for where it's stored. */
            receipts?: string[] | null;
            /** @description Number of entries in receipts. */
            readonly receiptsCount?: number | null;
            /** @description If provider = 'mobilepay' this is a reference to the Mobile Pay transaction */
            readonly mobilepayid?: string | null;
            /** @description The paymentid the type is related to */
            readonly paymentid?: number | null;
            /** @description The Stripe payment intent client secret used to collect the payment on the client. Only relevant if provider is 'stripe'. */
            readonly stripe_intentsecret?: string | null;
            /** @description The ID of the Stripe PaymentIntent. */
            readonly stripe_intentid?: string | null;
            /** @description The reference for the vipps payment */
            readonly vipps_reference_id?: string | null;
            /** @description If an error occured during the payment, this will contain the error message, if supported by the provider. */
            error_message?: string | null;
            provider?: components["schemas"]["PaymentProvider"] | (string | null);
            /**
             * @default captured
             * @enum {string}
             */
            status?: "initiated" | "reserved" | "cancelled" | "captured";
        };
        /** @enum {string|null} */
        PaymentProvider: "mobilepay" | "bamdesk" | "nets" | "stripe" | "vipps" | null;
        /** @description The representation of a POS balance */
        POSBalance: {
            /** @description A unique payment ID */
            readonly id?: number;
            /**
             * @description The date of the balance. Defaults to current date
             * @example 2019-01-01 12:00:00
             */
            date?: string;
            /**
             * @description The date of when the balance has ended
             * @example 2019-01-01 12:00:00
             */
            readonly enddate?: string | null;
            /**
             * @description The date of when the balance has started
             * @example 2019-01-01 12:00:00
             */
            readonly startdate?: string | null;
            /**
             * @description The number of payments in the balance.
             * @example 5
             */
            numpayments?: number;
            /**
             * Format: double
             * @description The cash in the register at the start of the balance.
             * @example 123.45
             */
            cashstart?: number;
            /**
             * Format: double
             * @description The counted cash in the cash register
             * @example 123.45
             */
            cashcounted?: number;
            /**
             * Format: double
             * @description The expense for the day
             * @example 123.54
             */
            expense?: number | null;
            /**
             * Format: double
             * @description Revenue in cash
             * @example 123.45
             */
            cashrevenue?: number;
            /**
             * Format: double
             * @description Cash taken out of the register and put in the bank.
             * @example 123.45
             */
            cashtobank?: number;
            /**
             * Format: double
             * @example 123.45
             */
            cashdifference?: number;
            /**
             * Format: double
             * @description The total revenue
             * @example 123.45
             */
            totalrevenue?: number;
            /**
             * @description The name of the cash register (if any)
             * @example Register 1
             */
            readonly cashregistertitle?: string | null;
            /** @description Id of the cash register attached to the balance */
            cashregisterid?: number | null;
            /**
             * @description The datetime of the last Dinero sync (if any)
             * @example 2019-01-01 12:00:00
             */
            lastdinerosync?: string | null;
            /**
             * @description The datetime of the last E-conomic sync (if any)
             * @example 2019-01-01 12:00:00
             */
            lasteconomicsync?: string | null;
            readonly userid?: number | null;
            paymenttypes?: {
                /**
                 * @description The id of the payment type (if present)
                 * @example 1
                 */
                paymenttypeid?: number | null;
                /**
                 * @description The type of payment
                 * @example Cash
                 */
                title?: string;
                /**
                 * Format: double
                 * @description The amount of the payment type.
                 * @example 123.45
                 */
                amount?: number;
                /**
                 * @description Returns whether or not the payment type is cash-based.
                 * @example true
                 */
                cash?: boolean;
                /**
                 * @description The id for the Worldline card-terminal if it is used. Null otherwise.
                 * @example 75
                 */
                bamdesk_messageid?: number | null;
                /**
                 * @description The account where the payment has been posted. If not applicable, it will be null.
                 * @example 1234
                 */
                accountno?: string | null;
                /**
                 * @description The currency associated with the payment type
                 * @example DKK
                 */
                currency?: string | null;
                /**
                 * @description The giftcard type if a giftcard is used. Null otherwise.
                 * @example 1234
                 */
                giftcardtype?: string | null;
                provider?: string | null;
            }[];
            /**
             * Format: double
             * @description The total amount issued on giftcards.
             * @example 100
             */
            giftcardissued?: number | null;
            /**
             * Format: double
             * @description The total amount spent via giftcards.
             * @example -100
             */
            giftcardused?: number | null;
            /**
             * Format: double
             * @description The total sum of returned articles
             * @example -100
             */
            returnsum?: number;
            /**
             * Format: double
             * @description "The sum of payments paid with  economic invoices."
             * @example
             */
            economicinvoicesum?: number | null;
            /**
             * Format: double
             * @description Total sent to e-conomic, excluding the economicinvoicesum
             * @example 123.45
             */
            totalsenttobookkeeping?: number;
            /**
             * Format: double
             * @description The total VAT
             * @example 123.45
             */
            totalvat?: number;
            /** @description VAT by each percentage */
            totalvatbypercentage?: components["schemas"]["VATByPercentage"][];
            /**
             * Format: double
             * @description The total cost price
             * @example 123.45
             */
            totalcostprice?: number | null;
            /**
             * @description A text note
             * @example This is a note
             */
            note?: string | null;
            /**
             * Format: double
             * @description The sum of the customerpayments
             */
            customerpaymentsum?: number | null;
            /**
             * Format: double
             * @description Stock value of the store's inventory at the time of the POS balance
             * @example 10
             */
            stockvalue?: number | null;
            /** @description Sum of profit from selling secondhand products */
            secondhandprofitsum?: number | null;
            /** @description The sum of the difference between the price of the product sold and the profit for the product */
            secondhandcostpricesum?: number | null;
            /** @description Sum of all products that has been returned as a second hand product */
            secondhandreturnsum?: number | null;
            /** @description Sum of all products that are second hand */
            secondhandinvoicesum?: number | null;
            /** @description Sum of all stocktransactions that are not inventory count adjustments and that are not in payment or stocktransactionlist */
            totalstocktransactionsrest?: number | null;
            /** @description Sum of all stocktransactions that are inventory count adjustments */
            totalstocktransactionsinventorycount?: number | null;
            /**
             * @description The first payment no in this balance
             * @example 255
             */
            startpaymentno?: number;
            /**
             * @description The last payment no in this balance
             * @example 256
             */
            endpaymentno?: number;
        };
        VATByPercentage: {
            /**
             * Format: double
             * @example 25
             */
            percentage?: number;
            /**
             * Format: double
             * @example 420
             */
            amount?: number;
        };
        /** @description The representation of a pos balance search. */
        SearchPOSBalanceResponse: {
            content?: components["schemas"]["POSBalance"][];
            /**
             * @deprecated
             * @description The total number of items found by the query.
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        DiscountArticleItem: {
            title?: string;
            discount?: number;
            /** @description Which discount tag that should be applied to the discount */
            discounttagid?: number | null;
        };
        PaymentArticleResponse: {
            content?: components["schemas"]["PaymentArticle"];
        };
        PaymentArticleRequest: {
            content?: components["schemas"]["PaymentArticle"];
        };
        /** @description The representation of a POS article
         *
         *     To issue/sell giftcards
         *     If you want to issue a gift card, sell a article with productno either 'giftcard', 'voucher', or 'deposit' and provide a unique giftcard number as value of giftcardno. Quantity must be 1
         *     If you want to return a giftcard set `giftcardid` and quantity to -1.  Price must be positive
         *     If you want to use a giftcard set `giftcardid` and quantity to 1. Price must be be negative
         *     any other value for quantiy and price for giftcards will fail.
         *      */
        PaymentArticle: {
            /** @description A unique ID generated automatically */
            readonly id?: number | null;
            /** @description The title of the article sold */
            title?: string;
            /**
             * Format: double
             * @description Price of the article. By default price includes VAT but can be changed in the store config "prices_include_vat".
             * @example 100
             */
            price?: number;
            /**
             * Format: double
             * @description The cost price of the article sold
             */
            costprice?: number | null;
            /** @description Number of articles sold. */
            quantity?: number;
            /**
             * Format: double
             * @description VAT percentage.
             * @example 25
             */
            vat?: number;
            vatmode?: components["schemas"]["VATMode"];
            /**
             * Format: double
             * @description Consistently give the calculcated price without VAT. Regardless of the value of store config "prices_include_vat"
             * @example 80
             */
            readonly pricewithoutvat?: number | null;
            /**
             * Format: double
             * @description The calculated VAT for the price field.
             */
            readonly vatamount?: number | null;
            /**
             * @deprecated
             * @description Provide this if you want to issue a giftcard with the payment. The amount on the giftcard will be the value of price.
             */
            giftcardno?: string | null;
            /**
             * @deprecated
             * @description Provide this if you want use a giftcard as means of payment. The value of price will be deducted from the giftcard balance
             */
            usedGiftcardId?: number | null;
            /**
             * @deprecated
             * @description The giftcard object refered to by usedGiftcardId
             */
            readonly usedGiftcard?: components["schemas"]["Giftcard"];
            /** @description Id of issued giftcard */
            giftcardid?: number | null;
            readonly giftcard?: components["schemas"]["Giftcard"];
            /** @description Id of the attached customerarticle */
            customerarticleid?: number | null;
            /**
             * @deprecated
             * @description For legacy support, instead refer to product.productno. This is only used for voucher and deposit
             * @example voucher
             */
            productno?: string | null;
            /** @description < The the id of the product you want to sell. Stock will be deducted from the product after succesful payment. Deleted products are allowed. This is useful for return sales and payments of tickets with deleted products. */
            productid?: number | null;
            /** @description A reference to the product object refered to by productid */
            readonly product?: components["schemas"]["Product"];
            /** @description Relate the payment article to a taskmaterial. Use this to keep track of the payment status of task. */
            taskmaterialid?: number | null;
            /** @description If the article has a discount. This will be a reference to the discount article. This will be autofilled by matching the value of discountToken and discountedToken */
            readonly discount_ppm_id?: number | null;
            /**
             * @deprecated
             * @example 0.3423
             */
            discountToken?: number;
            /** @deprecated */
            discountedToken?: number | null;
            paymentid?: number | null;
            /** @description If a promotion is deleted from an article, this is set to 1, thus no further promotions will be applied to it */
            deletedpromotion?: number | null;
            discounttagid?: number | null;
            discounttag?: components["schemas"]["DiscountTag"];
            promotionid?: number | null;
            /** @deprecated */
            taskmaterial?: components["schemas"]["TicketMaterial"];
            bundleid?: number | null;
            /** @description Can either be "recurringpaymentterm", "newservicesubscription" or "newrecurringpayment" */
            type?: string | null;
            /** @description The id of the recurring payment */
            recurringpaymentid?: number | null;
            /** @description The id of the servicesubscription to be activated when payment completed */
            servicesubscriptionid?: number | null;
            /** @description subscription object of `servicesubscriptionid` */
            readonly servicesubscription?: components["schemas"]["ServiceSubscription"];
            /** @description The amount of loyalty points to be credited by this paymentmaterial */
            readonly loyaltypoints?: number | null;
            /** @description The id of the parent material. If set, this paymentmaterial is considered to be an addon */
            readonly addonparentmaterialid?: number | null;
            /** @default The date of when the material is added */
            readonly date?: string;
        };
        TicketMaterial: {
            /**
             * @description A unique TicketMaterial ID
             * @example 1
             */
            readonly id?: number | null;
            /** @example 1 */
            taskid: number;
            /** @example Bike */
            title: string;
            /** @example 5 */
            amount: number;
            /** @example 1 */
            customerarticleid?: number | null;
            readonly customerarticle?: components["schemas"]["CustomerArticle"];
            /**
             * Format: double
             * @description Price of the product. By default price includes VAT but can be changed in the store config "prices_include_vat".
             * @example 100
             */
            price: number | null;
            /**
             * Format: double
             * @description Cost price of the product.
             * @example 30
             */
            costprice?: number | null;
            /**
             * Format: double
             * @description Consistently give the calculcated price without VAT. Regardless of the value of store config "prices_include_vat"
             * @example 80
             */
            readonly pricewithoutvat?: number | null;
            /**
             * Format: double
             * @description The calculated VAT for the product's price field.
             */
            readonly calculatedvat?: number | null;
            /** @example 1 */
            productid?: number | null;
            readonly product?: components["schemas"]["Product"];
            /** @example 1 */
            productno?: string | null;
            /** @example 1 */
            discount_tm_id?: number | null;
            /**
             * @description If set, the material represents the use of giftcard for paying for the tasks
             * @example 1
             */
            usedGiftcardid?: number | null;
            /** @description Gift card object */
            usedGiftcard?: components["schemas"]["Giftcard"];
            /**
             * @description The promotion id of the that triggered the discount
             * @example 1
             */
            promotionid?: number | null;
            /**
             * @description If a promotion is deleted from a taskmaterial, then this value is set to 1, meaning every promotion on the material will not be applied
             * @example 1
             */
            deletedpromotion?: number | null;
            /** @description List of dates, when the material is expected to be delivered from ongoing orders */
            expecteddeliveries?: string[];
            /** @description Number used to determin the order of the materials */
            position?: number;
            /** @description Which discount tag it is attached to */
            discounttagid?: number | null;
            /** @description Label of the discount tag */
            discounttaglabel?: string | null;
            bundleid?: number | null;
            /** @description Can currently only be "newservicesubscription" */
            type?: string | null;
            /** @description The id of the servicesubscription to be activated when payment completed */
            servicesubscriptionid?: number | null;
            /** @description subscription object of `servicesubscriptionid` */
            readonly servicesubscription?: components["schemas"]["ServiceSubscription"];
            /** @description Number of non-reserved products in stock, ignoring the amount reserved by the material itself. Is null, if the material doesn't have a product, or stock keeping is disabled for the product. */
            readonly availablestock?: number | null;
            /** @description Is true, if the amount exceeds the available stock count otherwise false. Will always be false, if the material doesn't have a product, or stock keeping is disabled for the product. */
            readonly availablestockexceeded?: boolean;
            /** @description Amount of materials that are paid of. */
            readonly amountpaid?: number | null;
            /** @description The id of the parent material. If set, this paymentmaterial is considered to be an addon */
            readonly addonparentmaterialid?: number | null;
        };
        /** @description The representation of a POS sale */
        POSPayment: {
            /** @description A global unique payment id */
            readonly id?: number | null;
            /** @description a sequential autoincremented payment no */
            readonly paymentno?: number | null;
            /**
             * @description The id of the user who created the payment
             * @example 1
             */
            readonly userid?: number | null;
            /**
             * @description The id of the customer if any was attached to the payment
             * @example 1
             */
            customerid?: number | null;
            /** @description The date of the payment */
            readonly date?: string | null;
            /**
             * Format: double
             * @description the total number of payment articles sold
             * @example 1
             */
            readonly numberofmaterials?: number | null;
            /**
             * Format: double
             * @description The sum of the payment materials
             * @example 1
             */
            readonly sum?: number | null;
            /**
             * Format: double
             * @description the sum of all discounts in the purchase
             */
            readonly discountsum?: number | null;
            /** @description The amount left to pay for the payment */
            remainingamount?: number | null;
            /**
             * @description The id of the cash register used for the payment. Provide null if you don't use cash regiters
             * @example 1
             */
            cashRegisterId?: number | null;
            /**
             * @deprecated
             * @description Deprecated. Refer to cashregister.title
             */
            readonly cashRegisterTitle?: string | null;
            /**
             * @description Timestamp for when the last time the payment is updated.
             * @example 2022-03-10 00:00:00
             */
            updated_at?: string | null;
            /**
             * @description 1 if payment is a invoice payment. For example if the payment is paid via an invoice in economic.
             * @example 0
             */
            invoice?: number;
            /**
             * @description 1 if payment is a customer payment
             * @default 0
             * @example 0
             */
            customerpayment?: number;
            /** @description The cashregister referered to by cashRegisterId */
            readonly cashregister?: {
                title?: string;
                id?: number;
            } | null;
            /** @description The user refered to by userid */
            readonly user?: {
                name?: string;
                id?: number;
            } | null;
            /** @description The customer refered to by customerid */
            readonly customer?: components["schemas"]["Customer"];
            /** @description The list of payment articles. Those are the products sold with the payment. When you POST a payment this will be the list of articles sold Note: When get GET payments we only provide this if you add query parameter ?extra=1
             *      */
            articles?: components["schemas"]["PaymentArticle"][] | null;
            /** @description An optional list of ticket id attached to the payment. Note: When get GET payments we only provide this if you add query parameter ?extra=1
             *      */
            taskids?: number[];
            /** @description The sum of payment types considered cash payments. */
            readonly paidwithcash?: number | null;
            /** @description A list of payment transactions used as means of payments. */
            paymenttypes?: components["schemas"]["PaymentTypeRelation"][] | null;
            /** @description Included when partner store payments are included */
            readonly storeid?: number | null;
            /** @description Total payment sum for customer, only set if customerid and customerPaymentSum query parameters are set */
            readonly customerpaymentsum?: number | null;
            /**
             * @deprecated
             * @description Deprecated. To be removed soon
             */
            cash?: number | null;
            /** @description Set to 1 i f the return of the payment has secondhand products (only necessary to set if you want statistics of secondhand sales) */
            secondhand?: number | null;
            status?: components["schemas"]["PaymentStatus"];
            /** @description A reference ID to the POSPayment being returned. Only relevant for return sales. */
            returnpaymentid?: number | null;
            /** @description ID of the user who last modified the payment by changing the status from in_progress to complete/cancelled */
            lastmodifiedbyuserid?: number | null;
            /** @description The user refered to by lastmodifiedbyuserid */
            readonly lastmodifiedbyuser?: {
                name?: string;
                id?: number;
            } | null;
            /** @description A piece of text attached to the payment. */
            note?: string | null;
            /** @description Your permission to the payment. */
            readonly permission?: components["schemas"]["PartnerPermissionAccess"];
        };
        /** @description The representation of a pos payment search. */
        SearchPOSPaymentResponse: {
            content?: components["schemas"]["POSPayment"][];
            /**
             * @deprecated
             * @description The total number of items found by the query.
             */
            count?: number | null;
            /** @description True if there are more payments than the given page length */
            hasMore?: boolean | null;
            /** @description Total payment sum for customer, only set if customerid and customerPaymentSum query parameters are set */
            readonly totalcustomerpaymentsum?: number | null;
        };
        POSPaymentResponse: {
            content?: components["schemas"]["POSPayment"];
        };
        POSPaymentRequest: {
            content?: components["schemas"]["POSPayment"];
        };
        /** @enum {string} */
        PaymentStatus: "initialized" | "parked" | "in_progress" | "completed" | "cancelled";
        CustomerArticleCondition: {
            /** @description Whether or not the article is used (1 for used, 0 for not used) */
            secondhand?: number;
            /** @description New price of the article. The new price is only set if the article is used. */
            repurchaseprice?: number | null;
            /** @description The price of the return price of the serviceplan. If not the full amount of the service subscription is returned */
            servicesubscriptionreturnprice?: number | null;
        };
        POSRegister: {
            /**
             * @description A unique POS register id
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The name of a register
             * @example Register
             */
            title: string;
            /**
             * @deprecated
             * @description A list of payment types associated with this POS register
             */
            readonly paymenttypes?: components["schemas"]["PaymentType"][];
            /**
             * @deprecated
             * @description A list of bamdesk devices associated with this POS register
             */
            readonly bamdeskdevices?: components["schemas"]["BamdeskDevice"][];
            /**
             * @deprecated
             * @description A list of nets devices associated with this POS register
             */
            netsdevices?: components["schemas"]["NetsDevice"][];
            /** @deprecated */
            paymenttypeids?: number[] | null;
            /** @deprecated */
            netsdeviceids?: number[] | null;
            /**
             * @deprecated
             * @description IDs of Bamdesk devices associated with
             */
            bamdeskdeviceids?: number[] | null;
            /**
             * @description If set to 1, the default cash paymenttype in pos can be used as paymenttype.
             * @default 1
             */
            cashactive?: number;
            /**
             * @description If set to 1, the register becomes a default register.
             * @default 0
             */
            default?: number | null;
            /** @description The first balance starts with this amount */
            startamount?: number | null;
            /** @description A list of payment providers associated with this POS register */
            pospaymentmethodrelations?: components["schemas"]["POSPaymentMethodRelation"][] | null;
            /** @description Whether or not this cash register is deleted */
            deleted_at?: string | null;
        };
        /** @description The body of the request used to create/update a POS register. */
        SetPOSRegister: {
            content?: components["schemas"]["POSRegister"];
        };
        SetPOSRegisterResponse: {
            content?: components["schemas"]["POSRegister"];
        };
        POSRegisterResponse: {
            content?: components["schemas"]["POSRegister"][];
        };
        ProductImageResponse: {
            content?: components["schemas"]["ProductImage"];
            message?: string | null;
        };
        SetProductImageFromURL: {
            content?: {
                /** @description The url to fetch the image from */
                url?: string;
            };
            /**
             * @description Whether or not to update the image for partner products - if true this only updates the image, not any other properties
             * @default false
             */
            setatpartners?: boolean;
        };
        CountAddonsResponse: {
            count?: number;
        };
        /** @description The addon */
        PutProductAddonRequest: {
            amount?: number;
            /** Format: double */
            addonprice?: number | null;
        };
        /** @description A single addon. */
        ProductAddon: {
            readonly productno?: string;
            readonly productid?: number | null;
            readonly addonproductid?: number;
            amount?: number;
            /** Format: double */
            addonprice?: number | null;
            readonly updated_at?: string;
            readonly product?: components["schemas"]["Product"];
        };
        /** @description The body of the request. */
        AddAddon: {
            /** @description The id of the addon to add. */
            addonproductid?: number;
            /** @description The amount */
            amount?: number | null;
            /**
             * Format: double
             * @description A custom price
             */
            addonprice?: number | null;
        };
        /** @description A list of addons and related data. */
        AddonListResponse: {
            content?: components["schemas"]["ProductAddon"][];
            /** @description Whether or not the list has more entries. */
            hasMore?: boolean;
        };
        SetProductBulk: {
            /** @description The body of the request used to create/update products. */
            content?: components["schemas"]["SetProductBulkItem"][];
        };
        SetProductBulkItem: {
            /** @description The product you want to create/update. If product id is provided the product will be replaced. */
            content?: components["schemas"]["Product"];
            /**
             * @deprecated
             * @description Please use the field of the same name inside the product content instead.
             * @default false
             */
            syncproductdatawebshop?: boolean | null;
            /** @description Create/update the product at partner store */
            stocktransactionreason?: string;
        };
        ProductResponseBulk: {
            /** @description The body of the response used to create/update products. */
            content?: components["schemas"]["ProductResponseBulkItem"][];
        };
        ProductResponseBulkItem: {
            id?: number | null;
            content?: components["schemas"]["Product"];
            /**
             * @description HTTP status code of individual product
             * @example 200
             */
            status?: number | null;
            /** @description Exception message of a failed product import */
            message?: string | null;
            error?: Record<string, never>;
        };
        /** @description The representation of a product master data (stamdata). */
        ProductMasterData: {
            /**
             * @deprecated
             * @description A unique entry ID
             */
            readonly id?: number | null;
            /**
             * @description Name of supplier
             * @example DanishBikeSupplier
             */
            suppliername: string;
            tags?: string[] | null;
            /** @description Name of product */
            title?: string;
            /** @description Product id */
            productno: string;
            /** @description Barcode */
            barcode?: string | null;
            /** @description Barcode */
            alternativebarcode?: string | null;
            /** @description Brand */
            brand?: string | null;
            /**
             * Format: double
             * @description The suggested price
             */
            suggestedprice?: number | null;
            /**
             * Format: double
             * @description The actual price
             */
            price?: number | null;
            /** @description Color */
            color?: string | null;
            /** @description Size */
            size?: string | null;
            /** @description Style number */
            styleno?: string | null;
            /**
             * Format: double
             * @description VAT in percent
             * @example 25
             */
            vat?: number | null;
            /**
             * @description Industry. Examples: bikeshop, garden, phone, jewelry, generic.
             * @example bikeshop
             */
            industry: string;
            /**
             * @description Country. Examples: dk, en.
             * @example dk
             */
            country: string;
            /**
             * @description Year
             * @example 2019
             */
            year?: number | null;
            /**
             * @description The url from which to fetch the image
             * @example https://picsum.photos/id/674/3888/2592.jpg
             */
            imageurl?: string | null;
            /** @description Date time of the last time this entry was updated */
            readonly lastupdate?: string | null;
            /** @example Gear */
            customfield1?: string | null;
            /** @example 123123 */
            customfield2?: string | null;
            /** @example 123123 */
            customfield3?: string | null;
            /** @example Gold wheels */
            customfield4?: string | null;
        };
        /** @description The representation of product master data (response). */
        ProductMasterDataResponse: {
            content?: components["schemas"]["ProductMasterData"];
            status?: string;
        };
        ProductMasterDataSupplierSummary: {
            /** @example DanishBikeSupplier */
            supplierName?: string | null;
            /** @example bikeshop */
            industry?: string | null;
            /** @example dk */
            country?: string | null;
            /**
             * @description The number of products for this supplier
             * @example 123
             */
            count?: number;
            /**
             * @description The oldest update for this supplier
             * @example 2020-01-01T00:00:00
             */
            min_lastupdate?: string | null;
            /**
             * @description The newest update for this supplier
             * @example 2020-01-01T00:00:00
             */
            max_lastupdate?: string | null;
        };
        /** @description The representation of product master data (response). */
        ProductMasterDataSupplierResponse: {
            content?: components["schemas"]["ProductMasterDataSupplierSummary"][];
        };
        /** @description The body of the request used to create/update products. */
        SetProduct: {
            content?: components["schemas"]["Product"];
            /** @default null */
            stocktransactiontagid?: number | null;
            /**
             * @description The string content has to be valid JSON. It can contain whatever meta data a resthook could use. For example, 'syncproductdatawebshop' could be set to true, so the function, that receives the resthook, knows whether or not to sync a given product.
             * @default {}
             */
            resthookmetadata?: string;
            /** @description The reason why the product stock was updated. This will be saved in the product stock transaction log. */
            stocktransactionreason?: string;
            /**
             * @deprecated
             * @description If true, the Product.stockno update is interpreted as relative to its previous value; for example, if the previous value was 40 and you pass Product.stockno=42, it's interpreted as adding 2 (e.g. receiving 2 items from a supplier), and if you pass Product.stockno=38, it's interpreted as removing 2 (e.g. selling 2 items). If stocknochangeisrelative is false, the change is interpreted as absolute, e.g. with the intention of setting the initial value or correcting a wrong number. Note it has no direct effect on how Customers 1st functions; Product.stockno will always be set to the specified value; but it affects REST hooks (product.updated events) and 3rd party integrations if they distinguish between absolute and relative changes in the number of items in stock. See also stocknochangetype in Product.
             * @default false
             */
            stocknochangeisrelative?: boolean;
            /** @description A reference to the shopping list item id for which this product stock has been updated. */
            orderid?: number;
            /**
             * @description Create/update relavant product data at partner stores
             * @default false
             */
            setatpartners?: boolean;
        };
        Products: {
            content?: components["schemas"]["Product"][];
            /** @description If there exists a result page after the current page. Use this to create a 'next page' functionality */
            hasNextPage?: boolean;
        };
        /** @description The representation of a product. */
        ProductResponse: {
            content?: components["schemas"]["Product"];
            /** @description If true, the productno and serieno can be changed. */
            allow_edit_productno_and_serieno?: boolean | null;
        };
        /** @description The representation of a product search. */
        SearchProductResponse: {
            content?: components["schemas"]["Product"][];
            /**
             * @deprecated
             * @description The total number of products found by the query if ignoring pagination. Is null if `count` was not specified in the query parameter.
             */
            count?: number | null;
            /** @description True if there are more products to receive than the current pagination allowed. */
            hasMore?: boolean;
            /** @description Cursor for next page when using cursor based pagination. */
            nextCursor?: string | null;
        };
        /** @description A product tag response */
        ProductTagResponse: {
            content?: components["schemas"]["ProductTag"];
        };
        /** @description The product tags used by a store. */
        ProductTagListResponse: {
            content?: components["schemas"]["ProductTag"][];
            /**
             * @deprecated
             * @description The total number of product tags found
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description The representation of a promotion search. */
        SearchPromotionResponse: {
            content?: components["schemas"]["Promotion"][];
            /**
             * @deprecated
             * @description The total number of promotions found by the query if ignoring pagination.
             * @example 1
             */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description Object representing a promotion. */
        Promotion: {
            /**
             * @description A unique ID. Use this to handle this subscription.
             * @example 123
             */
            readonly id?: number | null;
            /**
             * @description Short name for the promotion
             * @example Summer discount
             */
            name?: string;
            /**
             * @description Description of the promotion. This is only displayed in the controlpanel, not for the customers.
             * @default
             * @example 10% on all bikes in the summer.
             */
            description?: string | null;
            /**
             * @description Whether or not the promotion is deleted. Disabled promotions do not trigger even when inside the date range.
             * @default 1
             * @example 1
             * @enum {integer|null}
             */
            deleted?: 0 | 1;
            /**
             * @description Specifies when the promotion starts. Null if the promotion has no startdate and thus is always in effect (except if deleted).
             * @example 2019-01-01 12:00:00
             */
            startdate?: string | null;
            /**
             * @description Specifies when the promotion ends. Null if the promotion has no enddate.
             * @example 2019-02-01 12:00:00
             */
            enddate?: string | null;
            /**
             * @description Minimum number of prodcts before the promotion is in effect
             * @default 1
             * @example 1
             */
            minproducts?: number;
            /** @description Whether or not to apply promotion to all */
            applyall?: boolean | null;
            productfilters?: components["schemas"]["PromotionProductFilter"][] | null;
            customerfilters?: components["schemas"]["PromotionCustomerFilter"][] | null;
            loyalty_members_only?: boolean | null;
            serviceplanfilters?: components["schemas"]["PromotionServicePlanFilter"][] | null;
            /**
             * @description A list of products from the cart that match the promotion. This will only be set in the case of the lookup endpoint.
             * @example null
             */
            readonly articles?: components["schemas"]["CartArticle"][] | null;
            readonly storeid?: number | null;
            productno_counts?: {
                productno?: string | null;
                count?: number | null;
            }[];
            /** @description The number of times this promotion matches things in the cart. This will only be set in the case of the lookup endpoint. */
            readonly count?: number | null;
            action?: components["schemas"]["PromotionAction"];
        };
        PromotionFilter: components["schemas"]["PromotionProductFilter"] | components["schemas"]["PromotionCustomerFilter"] | components["schemas"]["PromotionServicePlanFilter"];
        /** @description Filter promotion based on different product attributes. */
        PromotionProductFilter: {
            /**
             * @description What attribute to filter the promotion on.
             * @example tag
             * @enum {string}
             */
            attribute?: "product_productno" | "product_tag" | "product_brand" | "product_styleno";
            /** @example Bike */
            value?: (string | null) | (string[] | null);
        };
        /** @description Filter promotion based on different customer attributes. */
        PromotionCustomerFilter: {
            /**
             * @description What attribute to filter the promotion on.
             * @example tag
             * @enum {string}
             */
            attribute?: "customer_tag";
            value?: string[] | string;
        };
        /** @description Filter promotion based on serviceplan. */
        PromotionServicePlanFilter: {
            /**
             * @description What attribute to filter the promotion on.
             * @example tag
             * @enum {string}
             */
            attribute?: "serviceplan_handle";
            value?: string[] | string;
        };
        /** @description The action / effect the promotion has on checkout. */
        PromotionAction: {
            /**
             * @description The type of the action.
             * @example percentage
             * @enum {string}
             */
            type?: "percentage" | "adjustPriceBy" | "percentageByCostprice" | "totalPriceUnit";
            /**
             * Format: double
             * @description The amount to be deducted, depending on the `type`.
             * @example 10
             */
            amount?: number;
        };
        /** @description The object used to query for relevant promotions based on products and customers. */
        PromotionLookup: {
            /** @description List of productnos. */
            products?: (string | components["schemas"]["CartArticle"])[];
            /** @description Whether or not the lookup should find promotions which are deleted. */
            allowDeleted?: boolean | null;
            /**
             * @description The id of the customer. Can be null, if returned promotions should be relevant for all customers.
             * @example 42
             */
            customer?: number | null;
        };
        PromotionLookupResponse: {
            content?: components["schemas"]["Promotion"][];
            /**
             * @deprecated
             * @description Count of returned entries
             */
            count?: number | null;
            /** @description True if there are more promotions to receive than the current pagination allowed. */
            hasMore?: boolean;
        };
        CartArticle: {
            /**
             * @description The product number of the product that the article represents.
             * @example 456
             */
            productno?: string | null;
            /**
             * @description The amount that is present of that product.
             * @example 5
             */
            quantity?: number | null;
        };
        RecurringPaymentResponse: {
            content?: components["schemas"]["RecurringPayment"];
        };
        /** @description List of stores */
        RecurringPaymentRequest: {
            content?: components["schemas"]["RecurringPayment"];
        };
        /** @description List of stores */
        SearchRecurringPaymentResponse: {
            content?: components["schemas"]["RecurringPayment"][];
            /** @deprecated */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        RecurringPayment: {
            id?: number | null;
            /** @description Date of when the recurring payment has started */
            startdate?: string | null;
            /** @description Date of when the recurring payment has started */
            readonly expectedenddate?: string | null;
            /** @description Amount the customer has to pay pr. term which is calculated from amountleft and terms */
            termamount?: number | null;
            readonly termamountwithoutvat?: number | null;
            /** @deprecated */
            readonly termvatamount?: number | null;
            readonly vat?: number | null;
            /** @description The exact amount of the next payment. */
            readonly nextamount?: number | null;
            /** @description The amount the customer has to pay */
            amountleft?: number;
            customerid?: number;
            readonly customer?: components["schemas"]["Customer"];
            /** @description The number of the recurring payment */
            readonly paymentno?: number | null;
            /** @description Amount of terms the customer has to pay */
            terms?: number;
            /** @description The amount of terms that has been paid */
            readonly termspaid?: number | null;
            /**
             * @description Interval of when the next term is, you can either choose "month" or "year" as interval.
             * @enum {string}
             */
            interval?: "month" | "year";
            recurringpaymentproductdepreciations?: components["schemas"]["RecurringPaymentProductDepreciation"][];
            /** @description Date of when the next payment is due to. */
            nextduedate?: string | null;
            /** @description If the payment is overdue. */
            overdue?: boolean | null;
            status?: components["schemas"]["RecurringPaymentStatus"];
            readonly userid?: number | null;
            /** @description User that create the recurring payment */
            readonly user?: {
                name?: string;
                id?: number;
            } | null;
        };
        RecurringPaymentProductDepreciation: {
            id?: number | null;
            productid?: number;
            readonly product?: components["schemas"]["Product"];
            /** @description Id for the customerarticle attached to the recurring payment product */
            customerarticleid?: number | null;
            readonly customerarticle?: components["schemas"]["CustomerArticle"];
            scrapvalue?: number;
            /** @description The initialcostprice is set from the products costprice */
            readonly initialcostprice?: number | null;
            /** @description The costprice slowly depreciate, this is what the costprice has been depreciated to */
            readonly currentcostprice?: number | null;
            recurringpaymentid?: number | null;
            /** @description The date when the products costprice degrades to scrapvalue (it degrades every payment) */
            scrapdate?: string | null;
            readonly created_at?: string | null;
        };
        /** @enum {string} */
        RecurringPaymentStatus: "active" | "cancelled" | "paidwaitingreturn" | "completed";
        ServicePlanResponse: {
            content?: components["schemas"]["ServicePlan"];
        };
        ServicePlanRequest: {
            content?: components["schemas"]["ServicePlan"];
        };
        SearchServicePlanResponse: {
            content?: components["schemas"]["ServicePlan"][];
            /** @deprecated */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        ServiceSubscriptionResponse: {
            content?: components["schemas"]["ServiceSubscription"];
        };
        ServiceSubscriptionRequest: {
            content?: components["schemas"]["ServiceSubscription"];
        };
        SearchServiceSubscriptionResponse: {
            content?: components["schemas"]["ServiceSubscription"][];
        };
        /** @description A config. For a complete list refer to https://api-docs.c1st.com/#section/General/Configs */
        ConfigAPI: {
            key?: string;
            value?: string | null;
            description?: string | null;
        };
        /** @description The body of the request used to create/update configs. */
        SetConfigs: {
            content?: components["schemas"]["ConfigAPI"][];
            /** @description If supplied, will be used as the target store to set storeconfigs (only if the apitoken has adequate permission). */
            targetStoreId?: number | null;
        };
        /** @description Get configs */
        GetConfigs: {
            content?: components["schemas"]["ConfigAPI"][];
            /** @description If supplied, will be used as the target store to set storeconfigs (only if the source apitoken has adequate permission). */
            targetStoreId?: number | null;
        };
        /** @description partner stores */
        PartnerStores: {
            viewstock?: components["schemas"]["Store"][];
            saveproduct?: components["schemas"]["Store"][];
            sharecustomer?: components["schemas"]["Store"][];
            inventorymove?: components["schemas"]["Store"][];
            sharecustomerarticle?: components["schemas"]["Store"][];
        };
        /** @description PrintDesk settings object */
        PrintDeskSettings: {
            /** @description Array of each print desk device's settings */
            derivedDevices?: components["schemas"]["PrintDeskDevice"][];
        };
        /** @description A PrintDesk device object */
        PrintDeskDevice: {
            ip?: string | null;
            /** @enum {string|null} */
            derivedStatus?: "active" | "disconnected" | null;
            deviceid?: string | null;
            port?: number | null;
            name?: string | null;
            ts?: string | null;
            /** @enum {string|null} */
            platform?: "darwin" | "win32" | "linux" | null;
            printers?: components["schemas"]["PrintDeskPrinter"][];
        };
        /** @description A PrintDesk printer object */
        PrintDeskPrinter: {
            /** @description deviceName, see https://www.electronjs.org/docs/api/web-contents#contentsprintoptions-callback */
            name?: string | null;
            description?: string | null;
            id?: string | null;
            /** @enum {string|null} */
            status?: "active" | "unknown" | null;
        };
        SettingsAPI: {
            store?: components["schemas"]["Store"];
            readonly storeTimezone?: string;
            configs?: components["schemas"]["ConfigAPI"][];
            printDesk?: components["schemas"]["PrintDeskSettings"];
            appConfigs?: components["schemas"]["AppConfigs"];
            /** @deprecated */
            customFields?: components["schemas"]["CustomProductField"][];
            featureFlags?: {
                key?: string;
                value?: boolean;
            }[];
            /** @deprecated */
            partners?: components["schemas"]["PartnerStores"];
            /** @description Whether or not the store has external webshop integration that requires the special sync to webshop checkbox */
            shouldShowWebshopCheckbox?: boolean;
        };
        CustomProductField: {
            key?: string;
            config?: string;
            requiredCustomerArticle?: boolean;
            label?: string;
        };
        AppConfigs: {
            economic_appPublicToken?: string | null;
            ReePayPublicKey?: string | null;
        };
        /** @description The body of the request used to add items to a shopping list, using barcodes */
        AddShoppingListItemByBarcode: {
            partnerstoreid?: number;
            barcodes?: {
                barcode?: string;
                amount?: number;
            }[];
        };
        /** @description The body of the response */
        AddShoppingListItemByBarcodeResponse: {
            content?: {
                barcodesNotFound?: string[];
                barcodes?: string[];
            };
        };
        /** @description The body of the request used to create/update a shopping list item. */
        SetShoppingListItem: {
            /** @description The store id of the store that item is moved to. Stock movements are recieved as shopping list orders. The store id must be on the store's stock partner list. */
            partnerstoreid?: number;
            content?: components["schemas"]["ShoppingListItem"];
            /**
             * @description Aggregate same products with same cost price into one list-item.
             * @default true
             */
            aggregate?: boolean;
        };
        /** @description The representation of a shopping list item. The shopping list is a set of products the store must rememeber to order from a supplier. */
        ShoppingListItem: {
            /** @description A unique ID */
            readonly id?: number | null;
            /** @description a reference to the product. This field can only be set with POST */
            productid?: number | null;
            /** @description The supplierid attached to the order */
            supplierid?: number | null;
            /** @description The number of items to buy */
            amount: number;
            /**
             * Format: double
             * @description Cost price will default to product cost price if not specified
             * @example 29.95
             */
            costprice?: number | null;
            /**
             * Format: double
             * @description Used to check that `costprice` and `amount` is correct by verifying that `amount * costprice = expectedtotalcostprice`
             * @example 29.95
             */
            expectedtotalcostprice?: number | null;
            /** @description when added to the list */
            readonly added?: string | null;
            /** @description a reference to the task material. This field can only be set with POST */
            materialid?: number | null;
            /** @description a reference to the task of the material */
            readonly taskid?: number | null;
            /** @description The orderlist no of the attached orderlist */
            readonly orderlistno?: number | null;
            /** @description The order id if the shopping list item has been ordered. Can only be set while creating a shopping list order. This field is write once */
            readonly orderlistid?: number | null;
            /** @description when item has delivered to stock. Specificied by setting orderid when updating product. */
            readonly delivereddate?: string | null;
            /** @description The product refered to by productid */
            readonly product?: components["schemas"]["Product"];
            /** @description Amount of items that are received */
            readonly received?: number | null;
            /** @description Amount of items that are not received */
            readonly inorder?: number | null;
            /** @description Amount of items that are in a stocktransaction but not completed yet. */
            readonly pending?: number | null;
            receivedstatus?: components["schemas"]["ShoppingListReceivedStatus"];
            material?: components["schemas"]["TicketMaterial"];
            expecteddelivery?: string | null;
        };
        /** @description The representation of a shopping list search. */
        SearchShoppingListResponse: {
            content?: components["schemas"]["ShoppingListItem"][];
            /**
             * @deprecated
             * @description The total number of items found by the query.
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description The representation of a product. */
        ShoppingListItemResponse: {
            content?: components["schemas"]["ShoppingListItem"];
        };
        /** @description The representation of a shopping list order item. An order is at set of shopping list items that have been ordered */
        ShoppingListOrder: {
            /** @description A unique ID */
            readonly id?: number;
            /** @description The number of orderlistno (unique for storeid) */
            readonly orderlistno?: number;
            /** @description A note */
            note?: string | null;
            /** @description date when ordered */
            readonly orderdate?: string | null;
            orderids: number[] | null;
            /** @description Number of shopping list items which have been received */
            readonly receiveditems?: number;
            /** @description Total number of shopping list items on the order */
            readonly itemcount?: number;
            /** @description Supplier ID to invoice */
            invoicesupplierid?: number | null;
            /** @description Set custom invoice duedate to override the normal duedate fetched from the E-conomic supplier. Format according to ISO-8601 (YYYY-MM-DD). */
            invoiceduedate?: string | null;
            /** @description Set custom invoice date to override committed date. Format according to ISO-8601 (YYYY-MM-DD). */
            invoicedate?: string | null;
            /** @description Supplier object to invoice */
            readonly invoicesupplier?: components["schemas"]["Supplier"];
            readonly suppliers?: components["schemas"]["Supplier"][] | null;
            /** @description Total amount of items that needs to be ordered */
            readonly totalamount?: number;
            /** @description Total amount of received items */
            readonly totalreceived?: number;
            /** @description Total amount of items that are still in order */
            readonly totalinorder?: number;
            /** @description Total amount of items that are in a stocktransaction but not committed yet. */
            readonly totalpending?: number | null;
            /** @description 1 if the order is completed, 0 otherwise */
            readonly completed?: boolean;
            /** @description Date of latest received item if completed */
            readonly delivereddate?: string | null;
            /** @description Invoice number of the shopping list order */
            readonly invoicenumber?: string | null;
            shippingcost?: number | null;
        };
        /** @description The body of the request used to create/update a shopping list item. */
        SetShoppingListOrder: {
            /** @description see movestocktostoreid in SetShoppingListItem */
            partnerstoreid?: number;
            content: components["schemas"]["ShoppingListOrder"];
        };
        /** @description The representation of a shopping list search. */
        SearchShoppingListOrderResponse: {
            content?: components["schemas"]["ShoppingListOrder"][];
            /**
             * @deprecated
             * @description The total number of items found by the query.
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @enum {string} */
        ShoppingListReceivedStatus: "completed" | "partial" | "none";
        /** @description Total cost price of an shopping list */
        ShoppingListTotalCostPrice: {
            totalcostprice?: number;
        };
        ShoppingListTotalCostPriceResponse: {
            content?: components["schemas"]["ShoppingListTotalCostPrice"];
        };
        ShoppingListOrderPatchRequest: {
            /** @description Content body for updating the note */
            content?: {
                /** @description New note */
                note?: string | null;
                /** @description New shipping cost */
                shippingcost?: number | null;
                /** @description Supplier ID to invoice */
                invoicesupplierid?: number | null;
                /** @description Set custom invoice date to override committed date. Format according to ISO-8601 (YYYY-MM-DD). */
                invoicedate?: string | null;
                /** @description Invoice number of the shopping list order */
                readonly invoicenumber?: string | null;
            };
        };
        SMSShortcodeResponse: {
            content?: components["schemas"]["SMSShortcodeItem"];
        };
        SMSResponse: {
            content?: components["schemas"]["SMSResponseItem"][];
            /** @description HTTP status code of invidual SMS */
            status?: number;
            /** @description The total size (or count) of all sms's sent in the request */
            totalsize?: number | null;
        };
        SMSShortcodeItem: {
            /** @description The shortcode or "phone number" */
            shortcode?: string;
            /** @description When the shortcode was last used */
            last_used?: string | null;
        } | null;
        SMSResponseItem: {
            customerid?: number | null;
            phone?: string;
            smslogid?: number;
        };
        SendSMSItem: {
            content?: {
                customerid?: number | null;
                /** @description The customer the provided tag values apply to. */
                phone: string;
                tagvalues?: string[] | null;
            };
        };
        SendSMS: {
            content?: {
                message: string;
                /** @description The time of when to send the sms */
                sendtime?: string | null;
                /**
                 * @description Sms template used so send this message
                 * @default SMSTemplateEmpty
                 */
                template?: components["schemas"]["SMSTemplate"];
                items?: components["schemas"]["SendSMSItem"][];
                /** @description Tags in the given text message to be replaced by tag values associated with the individual recipient. */
                tags?: string[] | null;
            };
        };
        /** @description A logged SMS */
        SMSLog: {
            /**
             * @description A unique SMSLog ID
             * @example 1
             */
            readonly id?: number;
            message?: string | null;
            /**
             * @description The actual SMS count after the message has been split into 160 character segments
             * @example 2
             */
            readonly size?: number | null;
            date?: string;
            /** @description The phoneno in E164 format */
            phone_e164?: string | null;
            /** @example 1000 */
            readonly gateway_id?: number;
            /**
             * @deprecated
             * @description The status of the SMS reported by the gateway system. See https://gatewayapi.com/docs/rest.html#webhooks
             * @example DELIVERED
             */
            readonly gateway_status?: string | null;
            /**
             * @description A unix timestamp of the moment the latest gateway_status was reported by the gateway.
             * @example 1576748431
             */
            readonly gateway_time?: number | null;
            /** @description The time of the message that should be sent. */
            readonly sendtime?: string | null;
            /**
             * @description The status of the SMS
             * @example DELIVERED
             */
            readonly status?: components["schemas"]["SMSStatus"];
            /**
             * @description If 1 the message is an inbound message from the customer
             * @example 1
             */
            readonly inbound?: number;
            /**
             * @description The country code of where the sms was sent to (set by gateway api)
             * @example DK
             */
            readonly country?: string;
            /** @description Userid of who sent this sms, currently faked using ticket comment */
            readonly userid?: number;
            /**
             * @description The template used in this sms, currently faked using ticket comment
             * @example sms_task_created
             */
            readonly template?: string | null;
            /** @enum {string|null} */
            readonly encoding?: "gsm7" | "ucs2" | null;
        };
        /** @description Response when requesting customer sms log */
        SmsLogListResponse: {
            content?: components["schemas"]["SMSLog"][];
        };
        /** @enum {string} */
        SMSTemplate: "SMSTemplateTaskCreated" | "SMSTemplateTaskDone" | "SMSTemplateTaskSale" | "SMSTemplateEmpty" | "SMSTemplateReceipt" | "SMSTemplateCustom_1" | "SMSTemplateCustom_2" | "SMSTemplateCustom_3" | "SMSTemplateCustom_4" | "SMSTemplateCustom_5" | "SMSTemplateCustom_6" | "SMSTemplateCustom_7" | "SMSTemplateCustom_8" | "SMSTemplateCustom_9" | "SMSTemplateCustom_10" | "SMSTemplateServiceNotification";
        /** @enum {string} */
        SMSStatus: "RECEIVED" | "SCHEDULED" | "SENT" | "DELIVERED" | "DELETED" | "FAILED";
        /** @description Request when generating estimate of number of required segments */
        SmsSizeRequest: {
            content: {
                /** @description The message that should be estimated. */
                message: string | null;
            };
        };
        /** @description Response when generating estimate of number of required segments */
        SmsSizeEstimate: {
            content: {
                /** @description Estimated number of segments */
                size: number;
            };
        };
        /** @description The response of a stock transaction search. */
        SearchStockTransactionResponse: {
            content?: components["schemas"]["StockTransaction"][];
            /**
             * @deprecated
             * @description The total number of items found by the query if ignoring pagination.
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description Apply relative stock change to a product. If you want to apply a absolute change to a product stock. Set the value using PUT /product/{id} on stockno. */
        StockTransaction: {
            /** @description A unique transaction ID */
            readonly id?: number | null;
            /** @description a reference to product ID. */
            productid?: number | null;
            /**
             * @description Number of items to add to the stock for the product. The value can be negative if some items are removed from the stock.
             * @default null
             */
            addtostock?: number | null;
            /**
             * Format: double
             * @description The pr. unit cost price of the added items. The costprice of the product will be set to average of the current costprice and the costprice of the added items
             */
            costpriceofaddeditems?: number | null;
            /**
             * Format: double
             * @description The total cost price of the added items. If `costpriceofaddeditems` is left blank you can specify a total costprice in this field. Use this to avoid rounding errors.
             */
            totalcostpriceofaddeditems?: number | null;
            /**
             * Format: double
             * @description Used to check that `costprice` and `amount` is correct by verifying that `amount * costprice = expectedtotalcostprice`
             * @example 29.95
             */
            expectedtotalcostprice?: number | null;
            /** @description The logged reason for stock change */
            reason?: string | null;
            /**
             * @description Stock transactions can be grouped into lists and all applied as a single transaction. See stock transaction list.
             * @default null
             */
            stocktransactionlistid?: number | null;
            /** @description The list object refered to by stocktransactionlistid */
            readonly stocktransactionlist?: components["schemas"]["StockTransactionList"];
            /** @description The product stock number right after the transaction was applied */
            readonly stocknoafter?: number | null;
            /**
             * @description Indicates the stock transactions is an absolute adjustment of stock number and costprice. You can do an absolute adjustment by changing costprice or stockno when updating a product using the product endpoint.
             * @enum {integer}
             */
            readonly absoluteoverwrite?: 0 | 1;
            /**
             * @description Set to 1 if you want the stock transaction to be applied. Once commited a transaction cannot be changed. If the value is 0, the stock transaction is saved and can be committed by later setting commit = 1. Note, by default all stock transactions are committed. Use 0 to create draft transactions that will later be commiited.
             * @default 1
             */
            commit?: number;
            /** @description Date when the stock transaction was commited. Null if not committed */
            readonly committeddate?: string | null;
            /** @description An incremental value which can be used to lookup the commitorder for a specific product. */
            readonly commitorder?: number | null;
            /** @description Created date. */
            createddate?: string;
            /** @description The product object refered to by productid. */
            readonly product?: components["schemas"]["Product"];
            /** @description Use to save any misc data with the transaction. Misc data will be cleared when transaction is commited */
            miscdata?: string | null;
            /** @description pospaymentmaterial id if transaction was triggered by a sale */
            readonly pospaymentmaterialid?: number | null;
            /** @description payment material object refered to by pospaymentmaterialid */
            readonly pospaymentmaterial?: {
                paymentid?: number;
                id?: number;
            } | null;
            /** @description set if the stock transaction was created from a shopping list item */
            orderid?: number | null;
            /** @description The order refered to by orderid */
            readonly order?: components["schemas"]["ShoppingListItem"];
            /**
             * Format: double
             * @description The average stock value of the product at the time of the transaction
             */
            readonly costpriceavg?: number | null;
            /**
             * Format: double
             * @description The total average stock value of the product at the time of the transaction
             */
            readonly totalstockvalueavg?: number | null;
            /**
             * Format: double
             * @deprecated
             */
            readonly totalstockvaluefifo?: number | null;
            /**
             * Format: double
             * @deprecated
             */
            readonly totalcostpricefifo?: number | null;
            /** @description Id of user who made the stocktransaction */
            readonly userid?: number | null;
            /** @description Id of the StockTransactionTag attached to the transaction */
            stocktransactiontagid?: number | null;
            /** @description The tag */
            stocktransactiontag?: components["schemas"]["StockTransactionTag"];
            /** @description Id of the stocktransaction that was created from the partner store */
            fromstocktransactionid?: number | null;
        };
        StockTransactionResponse: {
            content?: components["schemas"]["StockTransaction"];
        };
        SetStockTransaction: {
            /**
             * @description Save transaction at partner store
             * @default null
             */
            partnerstoreid?: number;
            content?: components["schemas"]["StockTransaction"];
        };
        /** @enum {string} */
        StockTransactionListType: "reception" | "count" | "move";
        /** @description A list of stock transactions. Set commit = 1 to commit all transactions in a list. */
        StockTransactionList: {
            /** @description A unique ID */
            readonly id?: number | null;
            /** @description a free text note */
            note?: string | null;
            /** @description created date */
            readonly created?: string | null;
            /** @description If the inventory list is booked */
            readonly committeddate?: string | null;
            /**
             * @description PUT with value 1 to commit all stock transactions in the list. If type == "move", a stock move is done, if type == "reception" a stock reception is done
             * @default 0
             */
            readonly commit?: number;
            /**
             * @description The store id of the partner to move the stock to. Can only be set if type = move
             * @example null
             */
            movetostoreid?: number | null;
            movetostoretransactionlist?: {
                /** @description A unique ID */
                readonly id?: number | null;
                /** @description If the inventory list is booked */
                readonly committeddate?: string | null;
            } | null;
            fromstocktransactionlistid?: number | null;
            /** @description Assigned list number generated by a stock movement from partner store */
            readonly fromListNo?: number | null;
            /** @description Is included if present and includefromstore is 1, otherwise null. */
            fromstore?: components["schemas"]["Store"];
            /** @description The orderlist no of the attached orderlist */
            readonly orderlistno?: number | null;
            /** @description The  id of report that was created on inventory count */
            readonly inventorycountreportid?: number | null;
            /** @description The report number of the attached report */
            readonly reportno?: number | null;
            /** @description Sequentially generated list number */
            readonly listno?: number | null;
            /** @description The stock transaction lists invoice number */
            invoicenumber?: string | null;
            /** @description Shipping cost of the stock transaction list */
            shippingcost?: number | null;
            /** @description The id of the orderlistid which the stocktransaction list was created from */
            orderlistid?: number | null;
            /** @description The date the stock transaction list was synced to an external service (e.g. E-conomic) */
            partnersyncdate?: string | null;
            store?: components["schemas"]["Store"];
            type?: components["schemas"]["StockTransactionListType"];
            /** @description Id of the user who created/committed the stocktransaction */
            readonly userid?: number | null;
        };
        StockTransactionTag: {
            readonly id?: number | null;
            title?: string;
            handle?: string | null;
        };
        InvalidProductsInPartnerStoreItem: {
            /** @description The order id */
            orderId?: number;
            /** @description The partner's actual stockno */
            actualPartnerStockNo?: number | null;
            /** @description Whether or not the partner has the product */
            partnerHasProduct?: boolean;
            order?: components["schemas"]["ShoppingListItem"];
            product?: components["schemas"]["Product"];
        };
        InvalidProductsInPartnerStore: {
            /** @description Whether or not there are any invalid orders */
            hasInvalidOrders?: boolean;
            content?: components["schemas"]["InvalidProductsInPartnerStoreItem"][];
        };
        /** @description The body of the request used to create/update products. */
        SetStockTransactionList: {
            /**
             * @description Save transaction at partner store
             * @default null
             */
            partnerstoreid?: number | null;
            content?: components["schemas"]["StockTransactionList"];
        };
        StockTransactionListResponse: {
            content?: components["schemas"]["StockTransactionList"];
            /** @description Sum of costprice */
            totalcostprice?: number;
            /** @description Sum of all `addtostock` */
            addtostocksum?: number;
            errors?: components["schemas"]["StockTransactionListResponseError"][] | null;
        } | null;
        StockTransactionListResponseError: {
            /**
             * @description Identifier of the error
             * @enum {string}
             */
            errorcode?: "INVALID_PRODUCTS" | "INVALID_STOCK_COUNT" | "NO_MOVE_TARGET" | "INVALID_TOTAL_COSTPRICE" | "INVALID_SERIENO" | "INVALID_SERIENO_STOCK";
            /** @description Description of the error */
            message?: string;
        };
        StockTransactionListSearchResponse: {
            content?: components["schemas"]["StockTransactionList"][];
            /**
             * @deprecated
             * @description Number of available items, if ignoring pagination.
             * @example 5
             */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        StockTransactionCommitRequest: components["schemas"]["StockTransactionCommitRequestCreateList"] | components["schemas"]["StockTransactionCommitRequestAddToList"];
        StockTransactionCommitRequestCreateList: {
            /** @enum {string} */
            mode: "create_list";
            paginationStart: number;
            paginationLength: number;
        };
        StockTransactionCommitRequestAddToList: {
            /** @enum {string} */
            mode: "add_to_list";
            failureList: number;
            paginationStart: number;
            paginationLength: number;
        };
        StockTransactionCommitResponse: {
            failed?: {
                content?: {
                    transaction?: components["schemas"]["StockTransaction"];
                    error?: string;
                }[] | null;
                count?: number | null;
            };
            succeeded?: {
                content?: components["schemas"]["StockTransaction"][];
                count?: number | null;
            } | null;
            failedListId?: number | null;
        };
        StockTransactionTagRequest: {
            content?: components["schemas"]["StockTransactionTag"];
        };
        StockTransactionTagResponse: {
            content?: components["schemas"]["StockTransactionTag"];
        };
        StockTransactionTagsResponse: {
            content?: components["schemas"]["StockTransactionTag"][];
        };
        StripePaymentIntentRequest: {
            paymenttyperelationid?: number;
            amount?: number;
            currency?: string;
        };
        StripePaymentIntentResponse: {
            /** @description The payment intent secret used by the client to collect the payment */
            readonly intent_secret?: string;
        };
        StripeCapturePaymentRequest: {
            paymentintentid?: string;
            /** @description The payment intent secret used by the client to collect the payment */
            readonly intent_secret?: string;
        };
        StripeRefundPaymentRequest: {
            paymentintentid?: string;
            /** @description The payment intent client secret used to authorize the refund */
            paymentintentsecret?: string;
            /** @description The amount to be refunded */
            amount?: number;
        };
        StripeCapturePaymentResponse: {
            content?: {
                /** @description The payment intent id */
                paymentintentid?: string;
                readonly intent_secret?: string;
            };
        };
        /** @description Update a stripe reader */
        UpdateStripeReader: {
            content?: {
                label?: string;
            };
        };
        /** @description Label and registration_code for registering a new stripe reader */
        SetStripeReader: {
            content?: {
                label?: string;
                registration_code?: string;
            };
        };
        GetStripeReader: {
            content?: components["schemas"]["StripeReader"];
        };
        SupplierRequest: {
            content?: components["schemas"]["Supplier"];
        };
        SupplierResponse: {
            content?: components["schemas"]["Supplier"];
        };
        ListSupplierResponse: {
            content?: components["schemas"]["Supplier"][];
            /** @deprecated */
            count?: number;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @enum {string} */
        TicketAutoComment: "status_ready" | "status_new" | "status_done" | "status_awaiting" | "status_cancelled" | "status_quote" | "email_other" | "sms_task_done" | "sms_task_created" | "sms_other" | "sms_inbound_response";
        TicketComment: {
            /**
             * @description A unique TicketComment ID
             * @example 1
             */
            readonly id?: number;
            /** @example 1 */
            taskid?: number;
            /** @example 1 */
            userid?: number;
            /** @example A comment */
            comment?: string;
            /** @example sms_task_created */
            autocomment?: string | null;
            /** @example 2019-08-27 10:00:00 */
            readonly created?: string;
            readonly smslogid?: number | null;
            readonly smslog?: components["schemas"]["SMSLog"];
        };
        /** @description The body of the request used for creating / updating TicketComments */
        SetTicketComment: {
            content?: components["schemas"]["TicketComment"];
        };
        /** @description Response when requesting a list of ticket comments based on some filters. */
        TicketCommentListResponse: {
            content?: components["schemas"]["TicketComment"][];
            /**
             * @deprecated
             * @description Number of ticket comments
             * @example 5
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description Response when requesting a ticket comment */
        TicketCommentResponse: {
            content?: components["schemas"]["TicketComment"];
        };
        TicketFile: {
            /**
             * @description A unique TicketFile
             * @example 1
             */
            readonly id?: number;
            /** @example 1 */
            taskid?: number;
            /** @example 1 */
            s3id?: string;
            /** @example image.png */
            filename?: string;
            /** @example 1024 */
            size?: number;
            /** @example image/png */
            mime?: string;
            /** @example null */
            src?: string;
        };
        /** @description Response when requesting a list of task files based on some filters. */
        TicketFileListResponse: {
            content?: components["schemas"]["TicketFile"][];
            /**
             * @deprecated
             * @description Number of ticket comments
             * @example 5
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description Response when requesting a task file */
        TicketFileResponse: {
            content?: components["schemas"]["TicketFile"];
        };
        /** @description The body of the request used when creating / updating task files. */
        SetTicketFile: {
            content?: components["schemas"]["TicketFile"];
        };
        /** @description The body of the request used for creating / updating TicketMaterials */
        SetTicketMaterial: {
            content?: components["schemas"]["TicketMaterial"];
            /** @description If this is set, the position of this material will be between positionaftermaterialid and the material below if (if it exists) */
            positionaftermaterialid?: number | null;
            /** @description If this is set, the position of this material will be between positionbeforematerialid and the material above if (if it exists) */
            positionbeforematerialid?: number | null;
        };
        /** @description Response when requesting a list of task materials based on some filters. */
        TicketMaterialListResponse: {
            content?: components["schemas"]["TicketMaterial"][];
            /**
             * @deprecated
             * @description Number of task materials
             * @example 5
             */
            count?: number | null;
            /** @description True if there are data to retrieve than the given page length */
            hasMore?: boolean;
        };
        /** @description Response when requesting a list of task materials based on some filters. */
        TicketMaterialResponse: {
            content?: components["schemas"]["TicketMaterial"];
        };
        TicketTagResponse: {
            content?: components["schemas"]["TicketTag"];
        };
        SetTicketTag: {
            content?: components["schemas"]["TicketTag"];
        };
        TicketTag: {
            /**
             * @description A unique ticket ID
             * @example 1
             */
            readonly id?: number;
            /** @example Bestillingsvarer */
            label?: string;
            /** @example #ff0039 */
            color?: string | null;
            /** @description Unique handle for the produttag. Will be set automatically if not set. This value cannot be changed. */
            handle?: string | null;
        };
        SearchTicketTag: {
            content?: components["schemas"]["TicketTag"][];
        };
        /** @description A ticket representing a repair or work task. */
        Ticket: {
            /**
             * @description A unique ticket ID
             * @example 1
             */
            readonly id?: number;
            /**
             * @description The ID of the customer.
             * @example 234
             */
            customerid?: number | null;
            readonly customer?: components["schemas"]["Customer"];
            customerarticleids?: (number | null)[];
            readonly customerarticles?: components["schemas"]["CustomerArticle"][];
            /**
             * @description The ID of the employee assigned to the ticket.
             * @example 555
             */
            assignee?: number | null;
            /**
             * @description The ID of the employee who created the ticket.
             * @example 555
             */
            createByUserId?: number | null;
            /**
             * @description The name of the employee assigned to the ticket.
             * @example Brian
             */
            readonly assigneeName?: string | null;
            /**
             * @description The name of the user that created the ticket.
             * @example John
             */
            readonly createByUserName?: string | null;
            /**
             * @description An identifier for the ticket. This will default to next auto incremented value if not set
             * @example 456
             */
            cardno?: string | null;
            /**
             * @deprecated
             * @description A unique auto incrementing ID for the ticket
             * @example 100
             */
            readonly autoincrementno?: number | null;
            /**
             * @description A description of what will or has been done.
             * @example Bremsejustering (bag)
             */
            description?: string | null;
            /** @example 2018-08-01 14:00:00 */
            readonly created?: string;
            /** @example 2018-08-03 16:15:00 */
            startTime?: string | null;
            /** @example 2018-08-03 17:15:00 */
            pickup?: string | null;
            payments?: components["schemas"]["POSPayment"][];
            readonly paid?: boolean;
            /**
             * Format: double
             * @description Price agreed with customer incl. VAT
             * @example 99.95
             */
            agreedPrice?: number | null;
            /**
             * @description How many comments exist on the ticket.
             * @example 3
             */
            readonly numComments?: number;
            /**
             * Format: double
             * @description Total price of the all materials incl. VAT
             * @example 99.95
             */
            readonly totalPrice?: number | null;
            /**
             * @description Whether or not the ticket is in draft mode
             * @example 1
             */
            draft?: number;
            readonly tags?: components["schemas"]["TicketTag"][];
            tagids?: number[];
            status: components["schemas"]["TicketStatus"];
            type: components["schemas"]["TicketType"];
            /** @description Id of a task service attached to the task */
            taskserviceid?: number | null;
            /** @description ID of the owning store */
            storeid?: number;
            /** @description If payingcustomerid is set, it will use payingcustomerid as customer when the ticket is paid */
            payingcustomerid?: number | null;
            readonly payingcustomer?: components["schemas"]["Customer"];
            readonly templates?: components["schemas"]["TicketTemplateRelation"][] | null;
            /**
             * @description Timestamp for when the last time the customer is updated.
             * @example 2022-03-10 00:00:00
             */
            updated_at?: string | null;
            /**
             * @description Timestamp for when the ticket was deleted
             * @example 2022-03-10 00:00:00
             */
            deleted_at?: string | null;
            /** @description Your permission to the task. */
            readonly permission?: components["schemas"]["PartnerPermissionAccess"];
            /**
             * @description The estimated work load of this task. Has to be a positive decimal number.
             * @default 1
             * @example 1.25
             */
            workload?: number;
        };
        /** @enum {string} */
        TicketStatus: "new" | "ready" | "done" | "awaiting" | "quote" | "draft";
        /** @enum {string} */
        TicketType: "repair" | "sale";
        /** @description Response when requesting a list tickets based on some filters. */
        TicketCountResponse: {
            /** @example 5 */
            new?: number;
            /** @example 2 */
            ready?: number;
            /** @example 7 */
            awaiting?: number;
        };
        /** @description Response when requesting a list tickets based on some filters. */
        TicketListResponse: {
            content?: components["schemas"]["Ticket"][];
            /**
             * @deprecated
             * @description Number of available tickets, if ignoring pagination.
             * @example 5
             */
            count?: number | null;
            /** @description True if there are more tasks than the given page length */
            hasMore?: boolean;
        };
        /** @description A ticket response */
        TicketResponse: {
            storeid?: number;
            content?: components["schemas"]["Ticket"];
        };
        /** @description The body of the request used for creating / updating tickets */
        TicketRequest: {
            content?: components["schemas"]["Ticket"];
        };
        /** @description Response when requesting the store's daily ticket capacity for a startdate */
        TicketStoreCapacityResponse: {
            content?: {
                remainingTicketCapacity?: number;
            };
        };
        TicketTemplate: {
            /**
             * @description A unique ticket ID
             * @example 1
             */
            readonly id?: number;
            /** @example Bestillingsvarer */
            label?: string;
            /** @description Which TicketTemplateGroup this TicketTemplate applies to */
            readonly groupid?: number;
            readonly created_at?: string | null;
            readonly updated_at?: string | null;
            /** @description Unique handle for tasktemplates. Will be set automatically if not set */
            handle?: string | null;
            /** @description Number used to determine the order of the TaskTemplate */
            position?: number;
            note?: string | null;
            duedate?: string | null;
        };
        /**
         * @default initialized
         * @enum {string}
         */
        TemplateRelationStatus: "initialized" | "completed";
        TicketTemplateRelation: {
            /**
             * @description An id for the relation.
             * @example 1
             */
            readonly id?: number;
            /**
             * @description Task Id for the relation
             * @example 1
             */
            readonly ticketid?: number;
            readonly templateid?: number;
            readonly template?: components["schemas"]["TicketTemplate"];
            /** @example Task template relation note */
            note?: string | null;
            /** @example 2024-08-03 17:15:00 */
            duedate?: string | null;
            /** @example 2023-08-03 17:15:00 */
            updated_at?: string | null;
            /** @example 2023-08-03 17:15:00 */
            created_at?: string | null;
            /** @example 2023-08-03 17:15:00 */
            notified_at?: string | null;
            status?: components["schemas"]["TemplateRelationStatus"];
            /**
             * @description The ID of the employee who last check-marked the task template.
             * @example 3
             */
            status_changed_by_userid?: number | null;
            /** @description Allocated time on task */
            timespent?: number | null;
            /** @description Number used to determine the order of the TaskTemplate */
            position?: number;
            /**
             * @deprecated
             * @description use template.label
             */
            readonly label?: string;
            /**
             * @deprecated
             * @description use template.handle
             */
            readonly handle?: string;
            /**
             * @deprecated
             * @description use template.groupid
             */
            readonly groupid?: number;
        };
        AutoCreateServiceNotices: {
            /** @description Array of customer article ids */
            content?: number[];
            /**
             * @description only allow to add servicenotices to customer articles that have no servicenotices beforehand
             * @default true
             */
            protect?: boolean;
            /**
             * @description Use the latest selling date from each customer article as the origin date instead of using the date of today. Only servicenotifications that are on dates after today are generated
             * @default false
             */
            useoriginaldate?: boolean;
        };
        /** @description Responses for autocreating for each customerarticle */
        AutoCreateServiceNoticesResponse: {
            /** @description Array of responses with success status */
            content?: components["schemas"]["AutoCreateServiceNoticesResponseItem"][];
        };
        /** @description Response for a customerarticle */
        AutoCreateServiceNoticesResponseItem: {
            /** @description customer article id */
            id?: number;
            /** @description true if success, false if it failed to create servicenotices */
            success?: boolean;
            /** @description Exception message of a failed creation of servicenotices */
            message?: string | null;
        };
        BulkDeleteServiceNotices: {
            /** @description Array of customer article ids */
            content?: number[];
        };
        /** @description Response for bulk deleting service notices for each customerarticle */
        BulkDeleteServiceNoticesResponse: {
            /** @description Array of responses with success status */
            content?: components["schemas"]["BulkDeleteServiceNoticesResponseItem"][];
        };
        /** @description Response for a customerarticle */
        BulkDeleteServiceNoticesResponseItem: {
            /** @description customer article id */
            id?: number;
            /** @description true if success, false if it failed to delete servicenotices */
            success?: boolean;
            /** @description Exception message of a failed deletion of servicenotices */
            message?: string | null;
        };
        TicketTemplateResponse: {
            content?: components["schemas"]["TicketTemplate"];
        };
        SetTicketTemplate: {
            content?: components["schemas"]["TicketTemplate"];
            /** @description If this is set, the position of this TicketTemplate will be between positionaftermaterialid and the TicketTemplate below if (if it exists) */
            positionAfterId?: number | null;
            /** @description If this is set, the position of this TicketTemplate will be between positionbeforematerialid and the TicketTemplate above if (if it exists) */
            positionBeforeId?: number | null;
        };
        SearchTicketTemplate: {
            content?: components["schemas"]["TicketTemplate"][];
        };
        TicketTemplateGroupResponse: {
            content?: components["schemas"]["TicketTemplateGroup"];
        };
        SetTicketTemplateGroup: {
            content?: components["schemas"]["TicketTemplateGroup"];
        };
        TicketTemplateGroup: {
            /**
             * @description A unique group ID
             * @example 1
             */
            readonly id?: number;
            /** @example Food */
            name?: string;
            tickettype?: components["schemas"]["TicketType"];
            readonly created_at?: string;
            readonly updated_at?: string;
        };
        SearchTicketTemplateGroup: {
            content?: components["schemas"]["TicketTemplateGroup"][];
        };
        TicketTemplateMaterialResponse: {
            content?: components["schemas"]["TicketTemplateMaterial"];
        };
        SetTicketTemplateMaterial: {
            content?: components["schemas"]["TicketTemplateMaterial"];
        };
        TicketTemplateMaterial: {
            /**
             * @description A unique group ID
             * @example 1
             */
            readonly id?: number | null;
            /** @description Quantity of the material */
            amount: number;
            /**
             * Format: double
             * @description Set to non-null value to overwrite the price from the product
             */
            price?: number | null;
            /** @description Set to non-null value to overwrite the title from the product */
            title?: string | null;
            /**
             * Format: double
             * @description this will be price if this.price set or product.price
             */
            readonly derivedprice?: number;
            /** @description Productno of the associated product */
            productno?: string;
            /** @description ID of the associated ticket template */
            tasktemplateid?: number;
            /** @description A reference to the product object refered to by productid */
            readonly product?: components["schemas"]["Product"];
            readonly created_at?: string | null;
            readonly updated_at?: string | null;
        };
        SearchTicketTemplateMaterial: {
            content?: components["schemas"]["TicketTemplateMaterial"][];
        };
        SetTicketTemplateRelation: {
            content?: components["schemas"]["TicketTemplateRelation"];
            /** @description If this is set, the position of this TicketTemplateRelation will be between positionaftermaterialid and the TicketTemplateRelation below if (if it exists) */
            positionAfterId?: number | null;
            /** @description If this is set, the position of this TicketTemplateRelation will be between positionbeforematerialid and the TicketTemplateRelation above if (if it exists) */
            positionBeforeId?: number | null;
        };
        SearchTicketTemplateRelationResponse: {
            content?: components["schemas"]["TicketTemplateRelation"][];
            readonly materialsChanged?: boolean;
        };
        TicketTemplateRelationResponse: {
            content?: components["schemas"]["TicketTemplateRelation"];
        };
        UserRespond: {
            content?: components["schemas"]["User"];
            apitoken?: string | null;
        };
        User: {
            readonly id?: number;
            name?: string;
            /** Format: email */
            email?: string | null;
            /** @deprecated */
            amount?: number;
            /**
             * @description User is used for selling stuff
             * @enum {integer}
             */
            shopuser?: 0 | 1;
            /**
             * @description Api user that cannot login.
             * @enum {integer}
             */
            apiuser?: 0 | 1;
            /** @description Whether or not the user is protected by a (4 digit) passcode */
            readonly hasPasscode?: number;
            /** @description Whether or not the user is protected by a password */
            readonly hasPassword?: number;
            /** @deprecated */
            readonly apitoken?: string | null;
            restrictions?: components["schemas"]["UserRestriction"][] | null;
            /** @description 1 if the user is a deleted user, 0 otherwise */
            readonly deleted?: number;
            /** @description Whether or not the user is the store's main user. This is set on store creation and cannot be changed. */
            readonly mainuser?: number;
            /** @description Whether or not the user should be shown in the calendar. */
            showincalendar?: number | null;
            /**
             * @deprecated
             * @description Whether or not the user is using the new auth system.
             */
            newauthuser?: number | null;
        };
        SetUser: {
            content?: components["schemas"]["User"];
        };
        SearchUsers: {
            content?: components["schemas"]["User"][];
        };
        /** @enum {string} */
        UserRestriction: "POSBalanceModule" | "POSBalanceRead" | "OverviewModule" | "SettingsModule" | "StatisticsModule" | "ProductModule" | "POSModule" | "CustomerModule" | "AdminModule" | "CustomerEdit" | "CustomerDelete" | "CustomerArticleBulk" | "CustomerBulk" | "ProductCreate" | "ProductEdit" | "ProductDelete" | "ProductEditBulk" | "ProductEditStock" | "ProductEditCostprice" | "TaskModule" | "TaskCreate" | "TaskDelete" | "TaskEdit" | "SettingsUserRestrictions" | "ViewCostprice" | "GiftCardModule" | "GiftCardDelete" | "EditLoyaltyConfigs" | "AdjustLoyaltyBalance" | "OrderingProductsDeleteAll" | "PromotionsModule";
        SetPasswordResponse: {
            /** @description The API token of the new user */
            apitoken?: string;
        };
        VippsPayment: {
            amount?: number;
            /** @enum {string} */
            currency?: "NOK" | "DKK" | "EUR";
            /** @description Required if customerToken is not provided */
            phonedata?: {
                phone: string;
                country: string;
            } | null;
            postpone?: boolean | null;
            /** @default false, */
            createCustomer?: boolean;
            /** @description Customer token is used to identify the customer in Vipps when using QR flow. Required if phonedata is not provided */
            customerToken?: string | null;
            /** @description Required if customerToken is provided */
            paymentMethodRelationId?: number;
        };
        VippsPaymentRequest: {
            content?: components["schemas"]["VippsPayment"];
        };
        VippsUpsertCallbackQrRequest: {
            /** @description The location description is visible to the customer in the Vipps app */
            locationDescription: string;
            /** @description The codeId is a merchantQrId og beacon-id for the QR code */
            merchantQrId: string;
            /** @deprecated */
            isMobilepayBeacon: boolean;
        };
        VippsMerchantCallbackQr: {
            /** @description The location description is visible to the customer in the Vipps app */
            locationDescription?: string;
            /** @description The codeId is a merchantQrId og beacon-id for the QR code */
            merchantQrId?: string;
            merchantSerialNumber?: string;
            qrContent?: string;
            qrImageUrl?: string;
            category?: string;
        };
        VippsMerchantCallbackQrResponse: {
            content?: components["schemas"]["VippsMerchantCallbackQr"];
        };
        VippsResthooksListResponse: {
            content?: components["schemas"]["VippsResthook"][];
        };
        VippsResthook: {
            id?: string;
            events?: string[];
            url?: string;
            installed?: boolean;
        };
        VippsMerchantInfoResponse: {
            content?: {
                webhooks?: components["schemas"]["VippsResthook"][];
            };
        };
        VippsCurrentCustomerResponse: {
            content?: {
                customerToken?: string | null;
            };
        };
    };
    responses: {
        /** @description Client Error */
        ClientErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: {
        /** @description Id to the relevant resource */
        id: number;
        /** @description payment id */
        paymentId: number;
        /** @description Payment article id */
        paymentArticleId: number;
        /** @description Cursor for pagination. If parameter is set, paginationStart will be ignored. Only allowed for default sorting or based on id. */
        cursor: string;
        ticketId: number;
        ticketTemplateId: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Bundle: {
        parameters: {
            query?: {
                /** @example 100 */
                paginationStart?: number;
                /** @example 20 */
                paginationPageLength?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchBundleResponse"];
                };
            };
        };
    };
    addBundle: {
        parameters: {
            query?: {
                /** @example 100 */
                paginationStart?: number;
                /** @example 20 */
                paginationPageLength?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BundleRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BundleResponse"];
                };
            };
        };
    };
    deleteBundle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BundleFilter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BundleFilterRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BundleFilterResponse"];
                };
            };
        };
    };
    deleteBundleFilter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCustomerArticle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetCustomerArticle"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerArticleResponse"];
                };
            };
        };
    };
    deleteCustomerArticles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkDeleteCustomerArticles"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkDeleteCustomerArticlesResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    switchCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SwitchCustomerQuery"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerArticleResponse"];
                };
            };
        };
    };
    updateCustomerArticle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetCustomerArticle"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerArticleResponse"];
                };
            };
        };
    };
    deleteCustomerArticle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerArticleResponse"];
                };
            };
        };
    };
    getCustomerTags: {
        parameters: {
            query?: {
                freetext?: string;
                paginationStart?: number;
                paginationPageLength?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerTagsResponse"];
                };
            };
        };
    };
    createCustomerTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerTag"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerTagsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCustomerTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tag ID */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerTag"];
                };
            };
        };
    };
    updateCustomerTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tag ID */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerTag"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerTagsResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCustomerTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tag ID */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    searchCustomers: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Return the count or not. More slow, consider using thasMore for pagination
                 * @example true
                 */
                count?: boolean;
                /** @description Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported. */
                filter?: string;
                /**
                 * @description Determine the offset (in number of products) to fetch. This is usually a multiple of the pageLength.
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of products to fetch in one page.
                 * @example 30
                 */
                paginationPageLength?: number;
                /**
                 * @description Sorting order. If `order` is 1, products are retrieved in ascending order, if -1, in descending order.
                 * @example 1
                 */
                sortOrder?: -1 | 1;
                customerno?: string;
                /**
                 * @description Sort by `field`.
                 * @example id
                 */
                sortField?: string;
                /**
                 * @description Filter for marketing consented customers only.
                 * @example true
                 */
                allowMarketing?: boolean;
                /** @description Freetext search for customer name */
                name?: string;
                /** @description Freetext search for customer email */
                email?: string;
                /** @description Search for customer phone number */
                phoneno?: string;
                /** @description Search for customers EAN */
                ean?: string;
                /** @description Search for customers CVR */
                cvr?: string;
                /** @description Customer tags as a comma-separated string */
                tags?: string;
                /** @description Freetext search for customer, this searches in most customer properties like name, address, phone, email etc */
                freetext?: string;
                /** @description Filter for customers who are in loyalty club */
                partOfLoyaltyClub?: boolean;
                /**
                 * @description Get all customers updated after the given date
                 * @example 2020-01-01 00:00:00
                 */
                updated_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchCustomerResponse"];
                };
            };
        };
    };
    addCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetCustomer"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer ID */
                customerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    updateCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer ID */
                customerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetCustomer"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCustomer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer ID */
                customerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DiscountTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchDiscountTagResponse"];
                };
            };
        };
    };
    addDiscountTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiscountTagRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscountTagResponse"];
                };
            };
        };
    };
    discounttags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchGiftcard: {
        parameters: {
            query?: {
                /** @description The free text that is used to search in name, type, giftcardno, phone etc. */
                freetext?: string;
                /**
                 * @description date
                 * @example 2020-01-01 00:00:00
                 */
                fromdate?: string;
                /**
                 * @description date
                 * @example 2020-01-01 23:59:59
                 */
                todate?: string;
                /** @description filter on id */
                giftcardid?: number;
                /** @description filter on customerid */
                customerid?: number;
                /** @description filter on id */
                giftcardno?: string;
                /**
                 * @description Determine the offset (in number of item) to fetch. This is usually a multiple of the pageLength.
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of items to fetch in one page.
                 * @example 30
                 */
                paginationPageLength?: number;
                /**
                 * @description Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order.
                 * @example 1
                 */
                sortOrder?: -1 | 1;
                /**
                 * @description Sort by `field` e.g. giftcardno, date,..
                 * @example id
                 */
                sortField?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchGiftcardsResponse"];
                };
            };
        };
    };
    createGiftcard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostGiftcardsRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostGiftcardsResponse"];
                };
            };
            /** @description Bad request */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getGiftcard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The giftcard id */
                giftcardId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok. The created giftcard is returned in the response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetGiftcardResponse"];
                };
            };
            /** @description Giftcard not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                hookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestHook"];
                };
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                hookId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RestHook"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Whether or not the event was updated. 0 for failure, 1 for success.
                         * @example 1
                         */
                        updated?: number;
                    };
                };
            };
            /** @description Invalid input */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unsubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                hookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Whether or not the event was deleted. 0 for failure, 1 for success.
                         * @example 1
                         */
                        deleted?: number;
                    };
                };
            };
        };
    };
    getPaymentTypes: {
        parameters: {
            query?: {
                /** @description Whether or not to include receipts */
                getreceipts?: boolean;
            };
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentTypeRelation"][];
                };
            };
        };
    };
    addPaymentTypes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentTypeRelation"][];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentTypeRelation"][];
                };
            };
            /** @description The payment you are trying to add paymenttypes to does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPaymentTypeReceipts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    searchBalances: {
        parameters: {
            query?: {
                /**
                 * @description Determine the offset (in number of item) to fetch. This is usually a multiple of the pageLength.
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of items to fetch in one page.
                 * @example 30
                 */
                paginationPageLength?: number;
                /**
                 * @description Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order.
                 * @example 1
                 */
                sortOrder?: -1 | 1;
                /**
                 * @description Sort by `field` e.g. date,...
                 * @example id
                 */
                sortField?: string;
                /**
                 * @description Id of the cashier
                 * @example 1
                 */
                userId?: number;
                /**
                 * @description Id of the cash register
                 * @example 2
                 */
                cashRegisterId?: number;
                /**
                 * @description Get all payments before the given date
                 * @example 2020-01-01 23:59:59
                 */
                toDate?: string;
                /**
                 * @description Get all payments after the given date
                 * @example 2020-01-01 23:59:59
                 */
                fromDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchPOSBalanceResponse"];
                };
            };
        };
    };
    addArticles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentArticle"][];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentArticle"][];
                };
            };
            /** @description The payment you are trying to add articles to does exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchPosPayments: {
        parameters: {
            query?: {
                /** @description The free text that is used to search in paymentno, payment materials, etc. */
                freetext?: string;
                /** @description Search based on notes. */
                note?: string;
                /**
                 * @description Get all payments after the given fromdate to now (or to todate if specified)
                 * @example 2020-01-01 00:00:00
                 */
                fromdate?: string;
                /** @description 1 of you only want cash payments */
                cash?: number;
                /**
                 * @description 1 of you only want invoice payments
                 * @example 1
                 */
                invoice?: number;
                /**
                 * @description Get all payments before the given todate
                 * @example 2020-01-01 23:59:59
                 */
                todate?: string;
                /** @description Get payments of a specific product */
                productid?: number;
                /** @description Get all payments with paymentno >= paymentno_after */
                paymentno_after?: number;
                /**
                 * @description Get all payments updated after the given date
                 * @example 2020-01-01 00:00:00
                 */
                updated_after?: string;
                /** @description filter on userid */
                userid?: number;
                /** @description filter on customerid */
                customerid?: number;
                /** @description Calculate total payment sum for customer, requires that customerid is provided */
                customerPaymentSum?: number;
                /** @description Filter on paymenttype */
                paymenttypeid?: number;
                /** @description Filter on payment */
                paymentid?: number;
                /** @description 1 = only get bamdeskdevice payments */
                bamdeskdevice?: number;
                /** @description Includes payments from partner stores when not 0 */
                fromPartnerStores?: number;
                /** @description Filters return payments of the specified payment ID. Requires a payment ID */
                returnedpayments?: boolean;
                /**
                 * @description Includes articles and taskIds when not 0. Note that this can be expensive
                 * @example 1
                 */
                extra?: number;
                /**
                 * @description Determine the offset (in number of item) to fetch. This is usually a multiple of the pageLength.
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of items to fetch in one page.
                 * @example 30
                 */
                paginationPageLength?: number;
                /**
                 * @description Sorting order. If `order` is 1, items are retrieved in ascending order, if -1, in descending order.
                 * @example 1
                 */
                sortOrder?: -1 | 1;
                /**
                 * @description Sort by `field` e.g. paymentno, date,.
                 * @example id
                 */
                sortField?: string;
                /**
                 * @description Get payments with a specific cash register
                 * @example 1
                 */
                cashRegisterId?: number;
                /**
                 * @description Get payments with a specific status
                 * @example completed
                 */
                status?: components["schemas"]["PaymentStatus"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchPOSPaymentResponse"];
                };
            };
        };
    };
    addPayment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["POSPayment"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["POSPayment"];
                };
            };
        };
    };
    getPOSPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["POSPaymentResponse"];
                };
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putPOSPayment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description payment id */
                paymentId: components["parameters"]["paymentId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["POSPaymentRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["POSPaymentResponse"];
                };
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProductAddons: {
        parameters: {
            query?: {
                /**
                 * @description Determine the offset (in number of products) to fetch. This is usually a multiple of the pageLength. For legacy support you can also write pagination-start
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of products to fetch in one page. For legacy support you can also write pagination-PageLength
                 * @example 30
                 */
                paginationPageLength?: number;
            };
            header?: never;
            path: {
                /** @description The product ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddonListResponse"];
                };
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addProductAddon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAddon"];
            };
        };
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putProductAddonRelation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                productId: number;
                /** @description The add-on id */
                addonId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductAddon"];
            };
        };
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteProductAddon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                productId: number;
                /** @description The add-on id */
                addonId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    countProductAddons: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CountAddonsResponse"];
                };
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replaceProductBulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetProductBulk"];
            };
        };
        responses: {
            /** @description The endpoint always return 200 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseBulk"];
                };
            };
        };
    };
    deleteProductBulk: {
        parameters: {
            query?: {
                /** @description Pipe separated list of ids */
                ids?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The endpoint always return 200 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseBulk"];
                };
            };
        };
    };
    updateProductBulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetProductBulk"];
            };
        };
        responses: {
            /** @description The endpoint always return 200 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponseBulk"];
                };
            };
        };
    };
    searchProductMasterData: {
        parameters: {
            query?: {
                /** @description The search string */
                search?: string;
                /** @description A secondary search string that only searches in the barcode field */
                barcode?: string;
                /** @description The pagination page length */
                pagelength?: number;
                /** @description The pagination object offset */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        content?: components["schemas"]["ProductMasterData"][];
                        hasMore?: boolean;
                    };
                };
            };
            /** @description Failed */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addProductMasterdata: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductMasterData"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductMasterDataResponse"];
                };
            };
            /** @description Failed */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addUpdateBulk: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductMasterData"][];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductMasterDataResponse"][];
                };
            };
            /** @description Failed */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchProduct: {
        parameters: {
            query?: {
                /** @description Cursor for pagination. If parameter is set, paginationStart will be ignored. Only allowed for default sorting or based on id. */
                cursor?: components["parameters"]["cursor"];
                /** @description Barcode */
                barcode?: string;
                /** @description Brand */
                brand?: string;
                color?: string;
                size?: string;
                customfield1?: string;
                customfield2?: string;
                customfield3?: string;
                customfield4?: string;
                /**
                 * @deprecated
                 * @description Return the count or not.
                 * @example true
                 */
                count?: boolean;
                /** @description Freetext search used to find what humans expect. NB this can change over time, don't use this in your integration on this. */
                freetext?: string;
                /** @description The ID of the product. */
                id?: number;
                /** @description Only retrieve products that are currently in stock. */
                inStock?: boolean;
                /** @description Only retrieve products that needs to be ordered because of low stock. */
                needsOrdering?: boolean;
                /**
                 * @description Determine the offset (in number of products) to fetch. This is usually a multiple of the pageLength. For legacy support you can also write pagination-start
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of products to fetch in one page. For legacy support you can also write pagination-PageLength
                 * @example 30
                 */
                paginationPageLength?: number;
                /** @description Pipe separated list of product numbers. */
                productNo?: string[];
                /** @description Pipe separated list of style numbers. */
                styleNo?: string[];
                /** @description Serie-number */
                serieNo?: string;
                /** @description Return products that has a serie-number */
                hasSerieNo?: boolean;
                /** @description Return products that have a recommended retail price and the recommended retail price does not match the products price */
                needsrrppriceupdate?: boolean;
                /** @description Search in stocktransactionlist, this will only search on products that are a part of a stocktransactionlist with this id */
                stocktransactionlistid?: number;
                /**
                 * @description Sorting order. If `order` is 1, products are retrieved in ascending order, if -1, in descending order.
                 * @example 1
                 */
                "sort-order"?: -1 | 1;
                /**
                 * @description Sort by `field`.
                 * @example id
                 */
                "sort-field"?: string;
                /** @description Name of the supplier. */
                suppliername?: string;
                /** @description Tag. */
                tag?: string;
                /** @description List of tags to restrict the search to. */
                tags?: string[];
                /** @description Supplier. */
                supplierid?: string;
                /** @description List products for partner store. */
                partnerstoreid?: string;
                /** @description VAT mode */
                vatmode?: "normal" | "second_hand";
                /**
                 * @description Get all products updated after the given date
                 * @example 2020-01-01 00:00:00
                 */
                updated_after?: string;
                /**
                 * @description Get all products created before the given date
                 * @example 2020-01-01 00:00:00
                 */
                created_before?: string;
                /**
                 * @description Get all products updated before the given date
                 * @example 2020-01-01 00:00:00
                 */
                updated_before?: string;
                /**
                 * @description Whether to include discountprice for the products
                 * @example true
                 */
                getDiscountPrice?: boolean;
                /**
                 * @description If given, only get products that has/has not syncproductdatawebshop set
                 * @example true
                 */
                hasSyncproductdatawebshop?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchProductResponse"];
                };
            };
        };
    };
    addProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetProduct"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponse"];
                };
            };
            /** @description Invalid input */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProduct: {
        parameters: {
            query?: {
                /** @description Includes discountprice of a product. If set to 1, the discountprice is included, otherwise it is not included. */
                includeDiscountPrice?: number;
            };
            header?: never;
            path: {
                /** @description The product ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponse"];
                };
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replaceProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetProduct"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponse"];
                };
            };
            /** @description Bad request */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponse"];
                };
            };
            /** @description Not found */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                productId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetProduct"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductResponse"];
                };
            };
            /** @description Invalid input */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProductTags: {
        parameters: {
            query?: {
                /** @description Pipe separated list of tag handles. */
                handles?: string[];
                /** @description Pipe separated list of ids handles. */
                ids?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductTagListResponse"];
                };
            };
        };
    };
    createProductTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductTag"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductTagResponse"];
                };
            };
        };
    };
    getProductTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductTagResponse"];
                };
            };
        };
    };
    updateProductTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductTag"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductTagResponse"];
                };
            };
        };
    };
    deleteProductTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductTagResponse"];
                };
            };
        };
    };
    retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Promotion"];
                };
            };
            /** @description Ok */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content?: components["schemas"]["Promotion"];
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Whether or not the promotion was deleted. 0 for failure, 1 for success.
                         * @example 1
                         */
                        updated?: number;
                    };
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Whether or not the promotion was deleted. 0 for failure, 1 for success.
                         * @example 1
                         */
                        deleted?: number;
                    };
                };
            };
        };
    };
    ServicePlan: {
        parameters: {
            query?: {
                /** @description If it is set, it will exclude all serviceplans that does not match with the producttagrestriction. If not set it will get all serviceplans. */
                productid?: number;
                /** @description Wheter or not to include soft deleted service plans */
                withdeleted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchServicePlanResponse"];
                };
            };
        };
    };
    addServicePlan: {
        parameters: {
            query?: {
                /** @description If it is set, it will exclude all serviceplans that does not match with the producttagrestriction. If not set it will get all serviceplans. */
                productid?: number;
                /** @description Wheter or not to include soft deleted service plans */
                withdeleted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServicePlanRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServicePlanResponse"];
                };
            };
        };
    };
    deleteServicePlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ServiceSubscription: {
        parameters: {
            query?: {
                /** @description Sort by customerarticleid */
                customerarticleid?: number;
                /** @description Allow deleted subscription with search (1 for allow deleted, if it is set to 0 or not set at all, it will not include deleted subscriptions) */
                allowdeleted?: number;
                /** @description Sort by serviceplanid */
                serviceplanid?: number;
                /** @description Sort by serieno */
                serieno?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchServiceSubscriptionResponse"];
                };
            };
        };
    };
    addServiceSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceSubscriptionRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceSubscriptionResponse"];
                };
            };
        };
    };
    deleteServiceSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addServiceSubscriptionToMaterial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                materialid: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceSubscriptionRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceSubscriptionResponse"];
                };
            };
        };
    };
    configs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetConfigs"];
                };
            };
        };
    };
    updateConfigs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetConfigs"];
                };
            };
        };
    };
    deleteConfig: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                configKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsAPI"];
                };
            };
        };
    };
    getStore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Store"];
                };
            };
        };
    };
    updateStore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Store"];
                };
            };
        };
    };
    addShoppingListItemByBarcode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddShoppingListItemByBarcode"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddShoppingListItemByBarcodeResponse"];
                };
            };
        };
    };
    searchShoppingList: {
        parameters: {
            query?: {
                /**
                 * @description Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength.
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of items to fetch in one page.
                 * @example 30
                 */
                paginationPageLength?: number;
                /** @example 30 */
                orderid?: number;
                /** @description filter ordered items */
                notordered?: 0 | 1;
                supplierid?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchShoppingListResponse"];
                };
            };
        };
    };
    addShippingListItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetShoppingListItem"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetShoppingListItem"];
                };
            };
        };
    };
    getShoppingListTotalCostPrice: {
        parameters: {
            query?: {
                /** @example 30 */
                orderid?: number;
                supplierid?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShoppingListTotalCostPriceResponse"];
                };
            };
        };
    };
    getShoppingListItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The shopping list ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShoppingListItemResponse"];
                };
            };
            /** @description Bad request */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    replaceShoppingListItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The shopping list ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetShoppingListItem"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetShoppingListItem"];
                };
            };
        };
    };
    deleteShoppingListItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The shopping list ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShoppingListItemResponse"];
                };
            };
            /** @description Bad request */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchShoppingListOrders: {
        parameters: {
            query?: {
                /**
                 * @description Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength.
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Freetext search for note, orderlist number, product title etc.
                 * @example Bike
                 */
                freetext?: string;
                /**
                 * @description Determine the number of items to fetch in one page.
                 * @example 30
                 */
                paginationPageLength?: number;
                /**
                 * @description If it is set to 1, it only retrieves orders with all items received
                 * @example 1
                 */
                received?: number;
                /**
                 * @description If it is set to 1, it only retrieves orders where the items are not received
                 * @example 1
                 */
                notReceived?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchShoppingListOrderResponse"];
                };
            };
        };
    };
    addShoppingListOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetShoppingListOrder"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetShoppingListOrder"];
                };
            };
        };
    };
    deleteOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        deleted?: number;
                    };
                };
            };
        };
    };
    getStockTransactions: {
        parameters: {
            query?: {
                /** @description The ID of the product */
                productid?: number;
                /** @description The ID of the stock transaction list */
                stocktransactionlistid?: number;
                /** @description Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength. */
                paginationStart?: number;
                /**
                 * @description Determine the number of items to fetch in one page.
                 * @example 50
                 */
                paginationPageLength?: number;
                sort?: string;
                sortOrder?: number;
                /**
                 * @description Get all stocktransactions committed after the given date
                 * @example 2020-01-01 00:00:00
                 */
                committed_after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchStockTransactionResponse"];
                };
            };
        };
    };
    addStockTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetStockTransaction"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionResponse"];
                };
            };
        };
    };
    getStockTransaction: {
        parameters: {
            query?: {
                /** @example 100 */
                partnerstoreid?: number;
            };
            header?: never;
            path: {
                /** @description The product ID */
                stocktransactionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionResponse"];
                };
            };
        };
    };
    replaceStockTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                stocktransactionId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetStockTransaction"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionResponse"];
                };
            };
        };
    };
    deleteStockTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The product ID */
                stocktransactionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionResponse"];
                };
            };
        };
    };
    getStockTransactionLists: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Deprecated! . Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported.
                 */
                filter?: string;
                freetext?: string;
                /** @example 100 */
                partnerstoreid?: number;
                /**
                 * @description Determine the offset (in number of items) to fetch. This is usually a multiple of the pageLength.
                 * @example 100
                 */
                paginationStart?: number;
                /**
                 * @description Determine the number of items to fetch in one page.
                 * @example 30
                 */
                paginationPageLength?: number;
                /** @description 1 to include the store that sent the stock transaction, if present. 0 will not include the sender store. */
                includefromstore?: number | null;
                /**
                 * @description 1 to list committed lists, 0 to list non-committed lists
                 * @example 1
                 */
                committed?: number;
                /** @description Query stock transaction lists committed after a given date. */
                committedAfter?: string;
                /** @example move */
                type?: components["schemas"]["StockTransactionListType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionListSearchResponse"];
                };
            };
        };
    };
    addStockReception: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetStockTransactionList"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionListResponse"];
                };
            };
        };
    };
    getStockTransactionList: {
        parameters: {
            query?: {
                /** @description Display `addToStockSum` and `totalCostprice` in response by setting this value */
                calculations?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID */
                stocktransactionlistId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionListResponse"];
                };
            };
        };
    };
    replaceStockTransactionList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID */
                stocktransactionlistId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetStockTransactionList"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionListResponse"];
                };
            };
        };
    };
    deleteStockTransactionList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The  ID */
                stocktransactionlistId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            "2XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addStockFromOrderlistid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID */
                orderlistid: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Note to the transactionlist */
                    note?: string | null;
                    /** @description If specified, stock transaction request will be sent to partner store */
                    partnerstoreid?: number | null;
                };
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockTransactionListResponse"];
                };
            };
        };
    };
    getInvalidProductsFromOrderlistid: {
        parameters: {
            query: {
                partnerstoreid: number;
                selectedorders?: number[];
            };
            header?: never;
            path: {
                /** @description The ID */
                orderlistid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidProductsInPartnerStore"];
                };
            };
        };
    };
    listTicketComments: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Deprecated! Use the taskid parameter instead. Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported.
                 */
                filter?: string;
                /** @description Filter by task id */
                taskid?: number;
                /** @description Array of autocomment values to exclude */
                excludeautocomment?: string[];
                /** @description Whether or not to include comment if autocomment is null, task comments have a autocomment of null by default */
                includenullautocomments?: boolean;
                paginationStart?: number;
                paginationPageLength?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketCommentListResponse"];
                };
            };
        };
    };
    addTicketComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetTicketComment"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketCommentResponse"];
                };
            };
        };
    };
    getTicketComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketCommentResponse"];
                };
            };
        };
    };
    updateTicketComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetTicketComment"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketCommentResponse"];
                };
            };
        };
    };
    deleteTicketComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketCommentResponse"];
                };
            };
        };
    };
    listTaskFiles: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Deprecated! Use the taskid parameter instead. Filter expression. See https://restdocs.e-conomic.com/#filtering. `In` and `Not In` are **not** supported.
                 */
                filter?: string;
                /** @description Filter by task id */
                taskid?: number;
                /** @description Filter by id */
                id?: number;
                paginationStart?: number;
                /** @description Pagination page length */
                paginationPageLength?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketFileListResponse"];
                };
            };
        };
    };
    addTaskFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetTicketFile"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketFileResponse"];
                };
            };
        };
    };
    getTaskFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketFileResponse"];
                };
            };
        };
    };
    deleteTaskFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketFileResponse"];
                };
            };
        };
    };
    listTicketMaterials: {
        parameters: {
            query?: {
                ticketid?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketMaterialListResponse"];
                };
            };
        };
    };
    addTicketMaterial: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetTicketMaterial"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketMaterialResponse"];
                };
            };
        };
    };
    getTicketMaterial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketMaterialResponse"];
                };
            };
        };
    };
    updateTicketMaterial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetTicketMaterial"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketMaterialResponse"];
                };
            };
        };
    };
    deleteTicketMaterial: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketMaterialResponse"];
                };
            };
        };
    };
    getTicketTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchTicketTag"];
                };
            };
        };
    };
    addTicketTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetTicketTag"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketTagResponse"];
                };
            };
        };
    };
    deleteTicketTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketTagResponse"];
                };
            };
        };
    };
    addTicket: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TicketRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketResponse"];
                };
            };
        };
    };
    getTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ticket ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketResponse"];
                };
            };
        };
    };
    updateTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ticket ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TicketRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketResponse"];
                };
            };
        };
    };
    deleteTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ticket ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketResponse"];
                };
            };
        };
    };
    duplicateTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticketId: components["parameters"]["ticketId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TicketResponse"];
                };
            };
        };
    };
    getTicketTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchTicketTemplate"];
                };
            };
        };
    };
    tickettag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticketTemplateId: components["parameters"]["ticketTemplateId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchTicketTemplateMaterial"];
                };
            };
        };
    };
    getTicketTemplateRelations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ticketId: components["parameters"]["ticketId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchTicketTemplateRelationResponse"];
                };
            };
        };
    };
    getUsers: {
        parameters: {
            query?: {
                /**
                 * @description return soft deleted users
                 * @example true
                 */
                withTrashed?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchUsers"];
                };
            };
        };
    };
    setPasscode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    passcode?: string | null;
                };
            };
        };
        responses: {
            /** @description ok */
            "2XX": {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setPassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id to the relevant resource */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    password?: string | null;
                    currentPassword?: string | null;
                    email?: string | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/schema": components["schemas"]["SetPasswordResponse"];
                };
            };
        };
    };
}
